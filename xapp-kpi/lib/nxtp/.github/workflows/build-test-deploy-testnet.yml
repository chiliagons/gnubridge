name: E2E Workflow for Connext

on:
  push:
    branches:
      - main
      - prod
  pull_request:
    branches:
      - main
      - prod
  create:
    tag:
      - "v*"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Foundry
        uses: onbjerg/foundry-toolchain@v1
        with:
          version: nightly

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Yarn install
        run: yarn install

      - name: Forge install
        run: yarn workspace @connext/nxtp-contracts forge:install

      - name: Yarn build
        run: yarn build

      - name: Yarn test
        run: yarn test:all

      - name: Yarn lint
        run: yarn lint:all

      - name: Publish
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        env:
          YARN_NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          yarn workspace @connext/nxtp-utils npm publish --access public
          yarn workspace @connext/nxtp-contracts npm publish --access public
          yarn workspace @connext/nxtp-txservice npm publish --access public
          yarn workspace @connext/nxtp-adapters-subgraph npm publish --access public
          yarn workspace @connext/nxtp-adapters-cache npm publish --access public
          yarn workspace @connext/nxtp-sdk npm publish --access public

  build-and-push-router-image:
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: connext/router
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=semver,pattern={{raw}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/router/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  build-and-push-sequencer-image:
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: connext/sequencer
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=semver,pattern={{raw}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/sequencer/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  build-and-push-poller-image:
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: connext/poller
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=semver,pattern={{raw}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/poller/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  build-and-push-lighthouse-image:
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: connext/lighthouse
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=semver,pattern={{raw}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: docker/lighthouse/Dockerfile

    outputs:
      json: ${{ steps.meta.outputs.json }}

  build-and-push-web3signer:
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: connext/web3signer
    runs-on: ubuntu-latest
    needs: build-and-test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: docker/web3signer
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          file: docker/web3signer/Dockerfile

  smoke-tests:
    runs-on: ubuntu-latest
    needs:
      [
        build-and-push-router-image,
        build-and-push-sequencer-image,
        build-and-push-web3signer,
        build-and-push-poller-image,
        build-and-push-lighthouse-image,
      ]
    env:
      ROUTER_IMAGE: ${{ fromJSON(needs.build-and-push-router-image.outputs.json).tags[0] }}
      SEQUENCER_IMAGE: ${{ fromJSON(needs.build-and-push-sequencer-image.outputs.json).tags[0] }}
      WEB3_SIGNER_PRIVATE_KEY: ${{ secrets.WEB3_SIGNER_TESTNET_PRIVATE_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: run smoke tests
        run: |
          docker-compose up -d
          bash docker/bin/wait-for-services.sh router
          bash docker/bin/wait-for-services.sh sequencer

    outputs:
      router-tags: ${{ needs.build-and-push-router-image.outputs.json }}
      sequencer-tags: ${{ needs.build-and-push-sequencer-image.outputs.json }}
      poller-tags: ${{ needs.build-and-push-poller-image.outputs.json }}
      lighthouse-tags: ${{ needs.build-and-push-lighthouse-image.outputs.json }}

  terraform-infra:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/prod'
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    env:
      AWS_PROFILE: aws-deployer-connext
    permissions:
      contents: read
      packages: write

    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: Fooji/create-aws-profile-action@v1
        with:
          profile: aws-deployer-connext
          region: us-east-1
          key: ${{ secrets.DEPLOYER_AWS_ACCESS_KEY_ID }}
          secret: ${{ secrets.DEPLOYER_AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Init
        id: init
        working-directory: ./ops/infra
        run: terraform init

      - name: Terraform Deploy Infra
        id: apply
        working-directory: ./ops/infra
        run: |
          terraform apply -auto-approve

  terraform-services-backend-staging:
    needs: [smoke-tests, terraform-infra]
    env:
      AWS_PROFILE: aws-deployer-connext
      TF_VAR_full_image_name_poller: ${{ fromJSON(needs.smoke-tests.outputs.poller-tags).tags[0] }}

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7

      - name: Setup Sops
        uses: mdgreenwald/mozilla-sops-action@v1.2.0
        with:
          version: "3.7.2"

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: Fooji/create-aws-profile-action@v1
        with:
          profile: aws-deployer-connext
          region: us-east-1
          key: ${{ secrets.DEPLOYER_AWS_ACCESS_KEY_ID }}
          secret: ${{ secrets.DEPLOYER_AWS_SECRET_ACCESS_KEY }}

      - name: Decrypt Testnet Secrets
        id: decrypt
        run: sops -d ops/env/testnet/backend/secrets.staging.json > ops/testnet/staging/backend/tfvars.json

      - name: Terraform Init
        id: init
        working-directory: ./ops/testnet/staging/backend
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: ./ops/testnet/staging/backend
        run: |
          terraform plan -var-file=tfvars.json
        continue-on-error: true

      - name: Terraform Docker Image onto AWS
        id: apply
        working-directory: ./ops/testnet/staging/backend
        run: |
          terraform apply -var-file=tfvars.json -auto-approve

    outputs:
      poller-tags: ${{ needs.smoke-tests.outputs.poller-tags }}

  terraform-services-core-staging:
    needs: [smoke-tests, terraform-infra]
    env:
      AWS_PROFILE: aws-deployer-connext
      TF_VAR_full_image_name_router: ${{ fromJSON(needs.smoke-tests.outputs.router-tags).tags[0] }}
      TF_VAR_full_image_name_sequencer: ${{ fromJSON(needs.smoke-tests.outputs.sequencer-tags).tags[0] }}
      TF_VAR_full_image_name_lighthouse: ${{ fromJSON(needs.smoke-tests.outputs.lighthouse-tags).tags[0] }}

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7

      - name: Setup Sops
        uses: mdgreenwald/mozilla-sops-action@v1.2.0
        with:
          version: "3.7.2"

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: Fooji/create-aws-profile-action@v1
        with:
          profile: aws-deployer-connext
          region: us-east-1
          key: ${{ secrets.DEPLOYER_AWS_ACCESS_KEY_ID }}
          secret: ${{ secrets.DEPLOYER_AWS_SECRET_ACCESS_KEY }}

      - name: Decrypt Testnet Secrets
        id: decrypt
        run: sops -d ops/env/testnet/core/secrets.staging.json > ops/testnet/staging/core/tfvars.json

      - name: Terraform Init
        id: init
        working-directory: ./ops/testnet/staging/core
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: ./ops/testnet/staging/core
        run: |
          terraform plan -var-file=tfvars.json
        continue-on-error: true

      - name: Terraform Docker Image onto AWS
        id: apply
        working-directory: ./ops/testnet/staging/core
        run: |
          terraform apply -var-file=tfvars.json -auto-approve

    outputs:
      router-tags: ${{ needs.smoke-tests.outputs.router-tags }}
      sequencer-tags: ${{ needs.smoke-tests.outputs.sequencer-tags }}

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [terraform-services-core-staging, terraform-services-backend-staging]
    env:
      ROUTER_IMAGE: ${{ fromJSON(needs.terraform-services-core-staging.outputs.router-tags).tags[0] }}
      SEQUENCER_IMAGE: ${{ fromJSON(needs.terraform-services-core-staging.outputs.sequencer-tags).tags[0] }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: run smoke tests
        run: echo "to be implemented..."

    outputs:
      router-tags: ${{ needs.terraform-services-core-staging.outputs.router-tags }}
      sequencer-tags: ${{ needs.terraform-services-core-staging.outputs.sequencer-tags }}
      poller-tags: ${{ needs.terraform-services-backend-staging.outputs.poller-tags }}

  terraform-services-core-prod:
    if: github.ref == 'refs/heads/prod'
    needs: [e2e-tests]
    env:
      AWS_PROFILE: aws-deployer-connext
      TF_VAR_full_image_name_router: ${{ fromJSON(needs.e2e-tests.outputs.router-tags).tags[0] }}
      TF_VAR_full_image_name_sequencer: ${{ fromJSON(needs.e2e-tests.outputs.sequencer-tags).tags[0] }}

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7

      - name: Setup Sops
        uses: mdgreenwald/mozilla-sops-action@v1.2.0
        with:
          version: "3.7.2"

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: Fooji/create-aws-profile-action@v1
        with:
          profile: aws-deployer-connext
          region: us-east-1
          key: ${{ secrets.DEPLOYER_AWS_ACCESS_KEY_ID }}
          secret: ${{ secrets.DEPLOYER_AWS_SECRET_ACCESS_KEY }}

      - name: Decrypt Testnet Production Secrets
        id: decrypt
        run: sops -d ops/env/testnet/core/secrets.prod.json > ops/testnet/prod/core/tfvars.json

      - name: Terraform Init
        id: init
        working-directory: ./ops/testnet/prod/core
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: ./ops/testnet/prod/core
        run: |
          terraform plan -var-file=tfvars.json
        continue-on-error: true

      - name: Terraform Docker Image onto AWS
        id: apply
        working-directory: ./ops/testnet/prod/core
        run: |
          terraform apply -var-file=tfvars.json -auto-approve

  terraform-services-backend-prod:
    if: github.ref == 'refs/heads/prod'
    needs: [e2e-tests]
    env:
      AWS_PROFILE: aws-deployer-connext
      TF_VAR_full_image_name_poller: ${{ fromJSON(needs.e2e-tests.outputs.poller-tags).tags[0] }}

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7

      - name: Setup Sops
        uses: mdgreenwald/mozilla-sops-action@v1.2.0
        with:
          version: "3.7.2"

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: Fooji/create-aws-profile-action@v1
        with:
          profile: aws-deployer-connext
          region: us-east-1
          key: ${{ secrets.DEPLOYER_AWS_ACCESS_KEY_ID }}
          secret: ${{ secrets.DEPLOYER_AWS_SECRET_ACCESS_KEY }}

      - name: Decrypt Testnet Secrets
        id: decrypt
        run: sops -d ops/env/testnet/backend/secrets.prod.json > ops/testnet/prod/backend/tfvars.json

      - name: Terraform Init
        id: init
        working-directory: ./ops/testnet/prod/backend
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: ./ops/testnet/prod/backend
        run: |
          terraform plan -var-file=tfvars.json
        continue-on-error: true

      - name: Terraform Docker Image onto AWS
        id: apply
        working-directory: ./ops/testnet/prod/backend
        run: |
          terraform apply -var-file=tfvars.json -auto-approve
