/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v5.0.2), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2021 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 103 }

  /* === schema: public === */

  /* --- enums --- */

  export type transfer_status = 'Completed' | 'Executed' | 'Reconciled' | 'XCalled';
  export namespace every {
    export type transfer_status = ['Completed', 'Executed', 'Reconciled', 'XCalled'];
  }

  /* --- tables --- */

  /**
   * **asset_balances**
   * - Table in database
   */
  export namespace asset_balances {
    export type Table = 'asset_balances';
    export interface Selectable {
      /**
      * **asset_balances.asset_canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      asset_canonical_id: string;
      /**
      * **asset_balances.asset_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      asset_domain: string;
      /**
      * **asset_balances.router_address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      router_address: string;
      /**
      * **asset_balances.balance**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      balance: number;
    }
    export interface JSONSelectable {
      /**
      * **asset_balances.asset_canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      asset_canonical_id: string;
      /**
      * **asset_balances.asset_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      asset_domain: string;
      /**
      * **asset_balances.router_address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      router_address: string;
      /**
      * **asset_balances.balance**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      balance: number;
    }
    export interface Whereable {
      /**
      * **asset_balances.asset_canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      asset_canonical_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **asset_balances.asset_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      asset_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **asset_balances.router_address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      router_address?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **asset_balances.balance**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      balance?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **asset_balances.asset_canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      asset_canonical_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **asset_balances.asset_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      asset_domain: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **asset_balances.router_address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      router_address: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **asset_balances.balance**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      balance?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **asset_balances.asset_canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      asset_canonical_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **asset_balances.asset_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      asset_domain?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **asset_balances.router_address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      router_address?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **asset_balances.balance**
      * - `numeric` in database
      * - `NOT NULL`, default: `0`
      */
      balance?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'asset_balances_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **assets**
   * - Table in database
   */
  export namespace assets {
    export type Table = 'assets';
    export interface Selectable {
      /**
      * **assets.local**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      local: string;
      /**
      * **assets.adopted**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      adopted: string;
      /**
      * **assets.canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      canonical_id: string;
      /**
      * **assets.canonical_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      canonical_domain: string;
      /**
      * **assets.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
    }
    export interface JSONSelectable {
      /**
      * **assets.local**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      local: string;
      /**
      * **assets.adopted**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      adopted: string;
      /**
      * **assets.canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      canonical_id: string;
      /**
      * **assets.canonical_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      canonical_domain: string;
      /**
      * **assets.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string;
    }
    export interface Whereable {
      /**
      * **assets.local**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      local?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **assets.adopted**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      adopted?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **assets.canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      canonical_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **assets.canonical_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      canonical_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **assets.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **assets.local**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      local: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **assets.adopted**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      adopted: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **assets.canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      canonical_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **assets.canonical_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      canonical_domain: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **assets.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **assets.local**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      local?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **assets.adopted**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      adopted?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **assets.canonical_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      canonical_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **assets.canonical_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      canonical_domain?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **assets.domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      domain?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'assets_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **routers**
   * - Table in database
   */
  export namespace routers {
    export type Table = 'routers';
    export interface Selectable {
      /**
      * **routers.address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      address: string;
    }
    export interface JSONSelectable {
      /**
      * **routers.address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      address: string;
    }
    export interface Whereable {
      /**
      * **routers.address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      address?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **routers.address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      address: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **routers.address**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      address?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'routers_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **schema_migrations**
   * - Table in database
   */
  export namespace schema_migrations {
    export type Table = 'schema_migrations';
    export interface Selectable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string;
    }
    export interface JSONSelectable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string;
    }
    export interface Whereable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **schema_migrations.version**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      version?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = 'schema_migrations_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /**
   * **transfers**
   * - Table in database
   */
  export namespace transfers {
    export type Table = 'transfers';
    export interface Selectable {
      /**
      * **transfers.origin_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      origin_domain: string;
      /**
      * **transfers.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain: string | null;
      /**
      * **transfers.nonce**
      * - `int8` in database
      * - Nullable, no default
      */
      nonce: db.Int8String | null;
      /**
      * **transfers.to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      to: string | null;
      /**
      * **transfers.call_data**
      * - `text` in database
      * - Nullable, no default
      */
      call_data: string | null;
      /**
      * **transfers.idx**
      * - `int8` in database
      * - Nullable, no default
      */
      idx: db.Int8String | null;
      /**
      * **transfers.transfer_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transfer_id: string;
      /**
      * **transfers.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain: string | null;
      /**
      * **transfers.origin_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_transacting_asset: string | null;
      /**
      * **transfers.origin_transacting_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      origin_transacting_amount: number | null;
      /**
      * **transfers.origin_bridged_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_bridged_asset: string | null;
      /**
      * **transfers.origin_bridged_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      origin_bridged_amount: number | null;
      /**
      * **transfers.xcall_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_caller: string | null;
      /**
      * **transfers.xcall_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_transaction_hash: string | null;
      /**
      * **transfers.xcall_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_timestamp: number | null;
      /**
      * **transfers.xcall_gas_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      xcall_gas_price: number | null;
      /**
      * **transfers.xcall_gas_limit**
      * - `numeric` in database
      * - Nullable, no default
      */
      xcall_gas_limit: number | null;
      /**
      * **transfers.xcall_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_block_number: number | null;
      /**
      * **transfers.xcall_relayer_fee**
      * - `numeric` in database
      * - Nullable, no default
      */
      xcall_relayer_fee: number | null;
      /**
      * **transfers.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain: string | null;
      /**
      * **transfers.status**
      * - `transfer_status` in database
      * - `NOT NULL`, default: `'XCalled'::transfer_status`
      */
      status: transfer_status;
      /**
      * **transfers.routers**
      * - `_bpchar` in database
      * - Nullable, no default
      */
      routers: string[] | null;
      /**
      * **transfers.destination_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_transacting_asset: string | null;
      /**
      * **transfers.destination_transacting_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      destination_transacting_amount: number | null;
      /**
      * **transfers.destination_local_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_local_asset: string | null;
      /**
      * **transfers.destination_local_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      destination_local_amount: number | null;
      /**
      * **transfers.execute_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_caller: string | null;
      /**
      * **transfers.execute_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_transaction_hash: string | null;
      /**
      * **transfers.execute_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_timestamp: number | null;
      /**
      * **transfers.execute_gas_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      execute_gas_price: number | null;
      /**
      * **transfers.execute_gas_limit**
      * - `numeric` in database
      * - Nullable, no default
      */
      execute_gas_limit: number | null;
      /**
      * **transfers.execute_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_block_number: number | null;
      /**
      * **transfers.execute_origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_origin_sender: string | null;
      /**
      * **transfers.reconcile_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_caller: string | null;
      /**
      * **transfers.reconcile_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_transaction_hash: string | null;
      /**
      * **transfers.reconcile_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_timestamp: number | null;
      /**
      * **transfers.reconcile_gas_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      reconcile_gas_price: number | null;
      /**
      * **transfers.reconcile_gas_limit**
      * - `numeric` in database
      * - Nullable, no default
      */
      reconcile_gas_limit: number | null;
      /**
      * **transfers.reconcile_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_block_number: number | null;
    }
    export interface JSONSelectable {
      /**
      * **transfers.origin_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      origin_domain: string;
      /**
      * **transfers.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain: string | null;
      /**
      * **transfers.nonce**
      * - `int8` in database
      * - Nullable, no default
      */
      nonce: number | null;
      /**
      * **transfers.to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      to: string | null;
      /**
      * **transfers.call_data**
      * - `text` in database
      * - Nullable, no default
      */
      call_data: string | null;
      /**
      * **transfers.idx**
      * - `int8` in database
      * - Nullable, no default
      */
      idx: number | null;
      /**
      * **transfers.transfer_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transfer_id: string;
      /**
      * **transfers.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain: string | null;
      /**
      * **transfers.origin_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_transacting_asset: string | null;
      /**
      * **transfers.origin_transacting_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      origin_transacting_amount: number | null;
      /**
      * **transfers.origin_bridged_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_bridged_asset: string | null;
      /**
      * **transfers.origin_bridged_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      origin_bridged_amount: number | null;
      /**
      * **transfers.xcall_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_caller: string | null;
      /**
      * **transfers.xcall_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_transaction_hash: string | null;
      /**
      * **transfers.xcall_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_timestamp: number | null;
      /**
      * **transfers.xcall_gas_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      xcall_gas_price: number | null;
      /**
      * **transfers.xcall_gas_limit**
      * - `numeric` in database
      * - Nullable, no default
      */
      xcall_gas_limit: number | null;
      /**
      * **transfers.xcall_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_block_number: number | null;
      /**
      * **transfers.xcall_relayer_fee**
      * - `numeric` in database
      * - Nullable, no default
      */
      xcall_relayer_fee: number | null;
      /**
      * **transfers.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain: string | null;
      /**
      * **transfers.status**
      * - `transfer_status` in database
      * - `NOT NULL`, default: `'XCalled'::transfer_status`
      */
      status: transfer_status;
      /**
      * **transfers.routers**
      * - `_bpchar` in database
      * - Nullable, no default
      */
      routers: string[] | null;
      /**
      * **transfers.destination_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_transacting_asset: string | null;
      /**
      * **transfers.destination_transacting_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      destination_transacting_amount: number | null;
      /**
      * **transfers.destination_local_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_local_asset: string | null;
      /**
      * **transfers.destination_local_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      destination_local_amount: number | null;
      /**
      * **transfers.execute_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_caller: string | null;
      /**
      * **transfers.execute_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_transaction_hash: string | null;
      /**
      * **transfers.execute_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_timestamp: number | null;
      /**
      * **transfers.execute_gas_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      execute_gas_price: number | null;
      /**
      * **transfers.execute_gas_limit**
      * - `numeric` in database
      * - Nullable, no default
      */
      execute_gas_limit: number | null;
      /**
      * **transfers.execute_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_block_number: number | null;
      /**
      * **transfers.execute_origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_origin_sender: string | null;
      /**
      * **transfers.reconcile_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_caller: string | null;
      /**
      * **transfers.reconcile_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_transaction_hash: string | null;
      /**
      * **transfers.reconcile_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_timestamp: number | null;
      /**
      * **transfers.reconcile_gas_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      reconcile_gas_price: number | null;
      /**
      * **transfers.reconcile_gas_limit**
      * - `numeric` in database
      * - Nullable, no default
      */
      reconcile_gas_limit: number | null;
      /**
      * **transfers.reconcile_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_block_number: number | null;
    }
    export interface Whereable {
      /**
      * **transfers.origin_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      origin_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.nonce**
      * - `int8` in database
      * - Nullable, no default
      */
      nonce?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      to?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.call_data**
      * - `text` in database
      * - Nullable, no default
      */
      call_data?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.idx**
      * - `int8` in database
      * - Nullable, no default
      */
      idx?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.transfer_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transfer_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.origin_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_transacting_asset?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.origin_transacting_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      origin_transacting_amount?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.origin_bridged_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_bridged_asset?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.origin_bridged_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      origin_bridged_amount?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.xcall_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_caller?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.xcall_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_transaction_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.xcall_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.xcall_gas_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      xcall_gas_price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.xcall_gas_limit**
      * - `numeric` in database
      * - Nullable, no default
      */
      xcall_gas_limit?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.xcall_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_block_number?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.xcall_relayer_fee**
      * - `numeric` in database
      * - Nullable, no default
      */
      xcall_relayer_fee?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.status**
      * - `transfer_status` in database
      * - `NOT NULL`, default: `'XCalled'::transfer_status`
      */
      status?: transfer_status | db.Parameter<transfer_status> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, transfer_status | db.Parameter<transfer_status> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.routers**
      * - `_bpchar` in database
      * - Nullable, no default
      */
      routers?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.destination_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_transacting_asset?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.destination_transacting_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      destination_transacting_amount?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.destination_local_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_local_asset?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.destination_local_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      destination_local_amount?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.execute_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_caller?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.execute_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_transaction_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.execute_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.execute_gas_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      execute_gas_price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.execute_gas_limit**
      * - `numeric` in database
      * - Nullable, no default
      */
      execute_gas_limit?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.execute_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_block_number?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.execute_origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_origin_sender?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.reconcile_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_caller?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.reconcile_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_transaction_hash?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.reconcile_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_timestamp?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.reconcile_gas_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      reconcile_gas_price?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.reconcile_gas_limit**
      * - `numeric` in database
      * - Nullable, no default
      */
      reconcile_gas_limit?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      /**
      * **transfers.reconcile_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_block_number?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **transfers.origin_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      origin_domain: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **transfers.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.nonce**
      * - `int8` in database
      * - Nullable, no default
      */
      nonce?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      to?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.call_data**
      * - `text` in database
      * - Nullable, no default
      */
      call_data?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.idx**
      * - `int8` in database
      * - Nullable, no default
      */
      idx?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.transfer_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transfer_id: string | db.Parameter<string> | db.SQLFragment;
      /**
      * **transfers.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.origin_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_transacting_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.origin_transacting_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      origin_transacting_amount?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.origin_bridged_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_bridged_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.origin_bridged_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      origin_bridged_amount?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.xcall_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_caller?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.xcall_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.xcall_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.xcall_gas_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      xcall_gas_price?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.xcall_gas_limit**
      * - `numeric` in database
      * - Nullable, no default
      */
      xcall_gas_limit?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.xcall_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_block_number?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.xcall_relayer_fee**
      * - `numeric` in database
      * - Nullable, no default
      */
      xcall_relayer_fee?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.status**
      * - `transfer_status` in database
      * - `NOT NULL`, default: `'XCalled'::transfer_status`
      */
      status?: transfer_status | db.Parameter<transfer_status> | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.routers**
      * - `_bpchar` in database
      * - Nullable, no default
      */
      routers?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.destination_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_transacting_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.destination_transacting_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      destination_transacting_amount?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.destination_local_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_local_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.destination_local_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      destination_local_amount?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.execute_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_caller?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.execute_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.execute_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.execute_gas_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      execute_gas_price?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.execute_gas_limit**
      * - `numeric` in database
      * - Nullable, no default
      */
      execute_gas_limit?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.execute_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_block_number?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.execute_origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_origin_sender?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.reconcile_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_caller?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.reconcile_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.reconcile_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.reconcile_gas_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      reconcile_gas_price?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.reconcile_gas_limit**
      * - `numeric` in database
      * - Nullable, no default
      */
      reconcile_gas_limit?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      /**
      * **transfers.reconcile_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_block_number?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **transfers.origin_domain**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      origin_domain?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **transfers.destination_domain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_domain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.nonce**
      * - `int8` in database
      * - Nullable, no default
      */
      nonce?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.to**
      * - `bpchar` in database
      * - Nullable, no default
      */
      to?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.call_data**
      * - `text` in database
      * - Nullable, no default
      */
      call_data?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.idx**
      * - `int8` in database
      * - Nullable, no default
      */
      idx?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.transfer_id**
      * - `bpchar` in database
      * - `NOT NULL`, no default
      */
      transfer_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      /**
      * **transfers.origin_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      origin_chain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.origin_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_transacting_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.origin_transacting_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      origin_transacting_amount?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.origin_bridged_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      origin_bridged_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.origin_bridged_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      origin_bridged_amount?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.xcall_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_caller?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.xcall_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      xcall_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.xcall_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.xcall_gas_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      xcall_gas_price?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.xcall_gas_limit**
      * - `numeric` in database
      * - Nullable, no default
      */
      xcall_gas_limit?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.xcall_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      xcall_block_number?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.xcall_relayer_fee**
      * - `numeric` in database
      * - Nullable, no default
      */
      xcall_relayer_fee?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.destination_chain**
      * - `varchar` in database
      * - Nullable, no default
      */
      destination_chain?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.status**
      * - `transfer_status` in database
      * - `NOT NULL`, default: `'XCalled'::transfer_status`
      */
      status?: transfer_status | db.Parameter<transfer_status> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, transfer_status | db.Parameter<transfer_status> | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.routers**
      * - `_bpchar` in database
      * - Nullable, no default
      */
      routers?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.destination_transacting_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_transacting_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.destination_transacting_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      destination_transacting_amount?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.destination_local_asset**
      * - `bpchar` in database
      * - Nullable, no default
      */
      destination_local_asset?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.destination_local_amount**
      * - `numeric` in database
      * - Nullable, no default
      */
      destination_local_amount?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.execute_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_caller?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.execute_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.execute_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.execute_gas_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      execute_gas_price?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.execute_gas_limit**
      * - `numeric` in database
      * - Nullable, no default
      */
      execute_gas_limit?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.execute_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      execute_block_number?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.execute_origin_sender**
      * - `bpchar` in database
      * - Nullable, no default
      */
      execute_origin_sender?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.reconcile_caller**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_caller?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.reconcile_transaction_hash**
      * - `bpchar` in database
      * - Nullable, no default
      */
      reconcile_transaction_hash?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.reconcile_timestamp**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_timestamp?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.reconcile_gas_price**
      * - `numeric` in database
      * - Nullable, no default
      */
      reconcile_gas_price?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.reconcile_gas_limit**
      * - `numeric` in database
      * - Nullable, no default
      */
      reconcile_gas_limit?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      /**
      * **transfers.reconcile_block_number**
      * - `int4` in database
      * - Nullable, no default
      */
      reconcile_block_number?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
    }
    export type UniqueIndex = 'transfers_pkey';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = asset_balances.Table | assets.Table | routers.Table | schema_migrations.Table | transfers.Table;
  export type Selectable = asset_balances.Selectable | assets.Selectable | routers.Selectable | schema_migrations.Selectable | transfers.Selectable;
  export type JSONSelectable = asset_balances.JSONSelectable | assets.JSONSelectable | routers.JSONSelectable | schema_migrations.JSONSelectable | transfers.JSONSelectable;
  export type Whereable = asset_balances.Whereable | assets.Whereable | routers.Whereable | schema_migrations.Whereable | transfers.Whereable;
  export type Insertable = asset_balances.Insertable | assets.Insertable | routers.Insertable | schema_migrations.Insertable | transfers.Insertable;
  export type Updatable = asset_balances.Updatable | assets.Updatable | routers.Updatable | schema_migrations.Updatable | transfers.Updatable;
  export type UniqueIndex = asset_balances.UniqueIndex | assets.UniqueIndex | routers.UniqueIndex | schema_migrations.UniqueIndex | transfers.UniqueIndex;
  export type Column = asset_balances.Column | assets.Column | routers.Column | schema_migrations.Column | transfers.Column;
  export type AllBaseTables = [asset_balances.Table, assets.Table, routers.Table, schema_migrations.Table, transfers.Table];
  export type AllForeignTables = [];
  export type AllViews = [];
  export type AllMaterializedViews = [];
  export type AllTablesAndViews = [asset_balances.Table, assets.Table, routers.Table, schema_migrations.Table, transfers.Table];


  export type SelectableForTable<T extends Table> = {
    asset_balances: asset_balances.Selectable;
    assets: assets.Selectable;
    routers: routers.Selectable;
    schema_migrations: schema_migrations.Selectable;
    transfers: transfers.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    asset_balances: asset_balances.JSONSelectable;
    assets: assets.JSONSelectable;
    routers: routers.JSONSelectable;
    schema_migrations: schema_migrations.JSONSelectable;
    transfers: transfers.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    asset_balances: asset_balances.Whereable;
    assets: assets.Whereable;
    routers: routers.Whereable;
    schema_migrations: schema_migrations.Whereable;
    transfers: transfers.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    asset_balances: asset_balances.Insertable;
    assets: assets.Insertable;
    routers: routers.Insertable;
    schema_migrations: schema_migrations.Insertable;
    transfers: transfers.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    asset_balances: asset_balances.Updatable;
    assets: assets.Updatable;
    routers: routers.Updatable;
    schema_migrations: schema_migrations.Updatable;
    transfers: transfers.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    asset_balances: asset_balances.UniqueIndex;
    assets: assets.UniqueIndex;
    routers: routers.UniqueIndex;
    schema_migrations: schema_migrations.UniqueIndex;
    transfers: transfers.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    asset_balances: asset_balances.Column;
    assets: assets.Column;
    routers: routers.Column;
    schema_migrations: schema_migrations.Column;
    transfers: transfers.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    asset_balances: asset_balances.SQL;
    assets: assets.SQL;
    routers: routers.SQL;
    schema_migrations: schema_migrations.SQL;
    transfers: transfers.SQL;
  }[T];

}
