type Query {
  stagingkovan_asset(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingkovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingkovan_Asset
  stagingkovan_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingkovan_Asset_orderBy
    orderDirection: stagingkovan_OrderDirection
    where: stagingkovan_Asset_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingkovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingkovan_Asset!]!
  stagingkovan_assetBalance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingkovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingkovan_AssetBalance
  stagingkovan_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingkovan_AssetBalance_orderBy
    orderDirection: stagingkovan_OrderDirection
    where: stagingkovan_AssetBalance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingkovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingkovan_AssetBalance!]!
  stagingkovan_router(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingkovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingkovan_Router
  stagingkovan_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingkovan_Router_orderBy
    orderDirection: stagingkovan_OrderDirection
    where: stagingkovan_Router_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingkovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingkovan_Router!]!
  stagingkovan_originTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingkovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingkovan_OriginTransfer
  stagingkovan_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingkovan_OriginTransfer_orderBy
    orderDirection: stagingkovan_OrderDirection
    where: stagingkovan_OriginTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingkovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingkovan_OriginTransfer!]!
  stagingkovan_destinationTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingkovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingkovan_DestinationTransfer
  stagingkovan_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingkovan_DestinationTransfer_orderBy
    orderDirection: stagingkovan_OrderDirection
    where: stagingkovan_DestinationTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingkovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingkovan_DestinationTransfer!]!

  """Access to subgraph metadata"""
  stagingkovan__meta(block: stagingkovan_Block_height): stagingkovan__Meta_
  kovan_asset(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: kovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): kovan_Asset
  kovan_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: kovan_Asset_orderBy
    orderDirection: kovan_OrderDirection
    where: kovan_Asset_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: kovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [kovan_Asset!]!
  kovan_assetBalance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: kovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): kovan_AssetBalance
  kovan_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: kovan_AssetBalance_orderBy
    orderDirection: kovan_OrderDirection
    where: kovan_AssetBalance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: kovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [kovan_AssetBalance!]!
  kovan_router(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: kovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): kovan_Router
  kovan_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: kovan_Router_orderBy
    orderDirection: kovan_OrderDirection
    where: kovan_Router_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: kovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [kovan_Router!]!
  kovan_originTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: kovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): kovan_OriginTransfer
  kovan_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: kovan_OriginTransfer_orderBy
    orderDirection: kovan_OrderDirection
    where: kovan_OriginTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: kovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [kovan_OriginTransfer!]!
  kovan_destinationTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: kovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): kovan_DestinationTransfer
  kovan_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: kovan_DestinationTransfer_orderBy
    orderDirection: kovan_OrderDirection
    where: kovan_DestinationTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: kovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [kovan_DestinationTransfer!]!

  """Access to subgraph metadata"""
  kovan__meta(block: kovan_Block_height): kovan__Meta_
  stagingrinkeby_asset(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingrinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingrinkeby_Asset
  stagingrinkeby_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingrinkeby_Asset_orderBy
    orderDirection: stagingrinkeby_OrderDirection
    where: stagingrinkeby_Asset_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingrinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingrinkeby_Asset!]!
  stagingrinkeby_assetBalance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingrinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingrinkeby_AssetBalance
  stagingrinkeby_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingrinkeby_AssetBalance_orderBy
    orderDirection: stagingrinkeby_OrderDirection
    where: stagingrinkeby_AssetBalance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingrinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingrinkeby_AssetBalance!]!
  stagingrinkeby_router(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingrinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingrinkeby_Router
  stagingrinkeby_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingrinkeby_Router_orderBy
    orderDirection: stagingrinkeby_OrderDirection
    where: stagingrinkeby_Router_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingrinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingrinkeby_Router!]!
  stagingrinkeby_originTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingrinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingrinkeby_OriginTransfer
  stagingrinkeby_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingrinkeby_OriginTransfer_orderBy
    orderDirection: stagingrinkeby_OrderDirection
    where: stagingrinkeby_OriginTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingrinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingrinkeby_OriginTransfer!]!
  stagingrinkeby_destinationTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingrinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingrinkeby_DestinationTransfer
  stagingrinkeby_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingrinkeby_DestinationTransfer_orderBy
    orderDirection: stagingrinkeby_OrderDirection
    where: stagingrinkeby_DestinationTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingrinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingrinkeby_DestinationTransfer!]!

  """Access to subgraph metadata"""
  stagingrinkeby__meta(block: stagingrinkeby_Block_height): stagingrinkeby__Meta_
  goerli_asset(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Asset
  goerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Asset_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Asset_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Asset!]!
  goerli_assetBalance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_AssetBalance
  goerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AssetBalance_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AssetBalance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_AssetBalance!]!
  goerli_router(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Router
  goerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Router_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Router_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Router!]!
  goerli_originTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_OriginTransfer
  goerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OriginTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OriginTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_OriginTransfer!]!
  goerli_destinationTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_DestinationTransfer
  goerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_DestinationTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_DestinationTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_DestinationTransfer!]!

  """Access to subgraph metadata"""
  goerli__meta(block: goerli_Block_height): goerli__Meta_
  staginggoerli_asset(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Asset
  staginggoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Asset_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Asset_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Asset!]!
  staginggoerli_assetBalance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_AssetBalance
  staginggoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_AssetBalance_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_AssetBalance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_AssetBalance!]!
  staginggoerli_router(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Router
  staginggoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Router_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Router_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Router!]!
  staginggoerli_originTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_OriginTransfer
  staginggoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_OriginTransfer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_OriginTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_OriginTransfer!]!
  staginggoerli_destinationTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_DestinationTransfer
  staginggoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_DestinationTransfer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_DestinationTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_DestinationTransfer!]!

  """Access to subgraph metadata"""
  staginggoerli__meta(block: staginggoerli_Block_height): staginggoerli__Meta_
  rinkeby_asset(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_Asset
  rinkeby_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Asset_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Asset_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_Asset!]!
  rinkeby_assetBalance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_AssetBalance
  rinkeby_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_AssetBalance_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_AssetBalance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_AssetBalance!]!
  rinkeby_router(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_Router
  rinkeby_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Router_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Router_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_Router!]!
  rinkeby_originTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_OriginTransfer
  rinkeby_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_OriginTransfer_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_OriginTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_OriginTransfer!]!
  rinkeby_destinationTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_DestinationTransfer
  rinkeby_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_DestinationTransfer_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_DestinationTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_DestinationTransfer!]!

  """Access to subgraph metadata"""
  rinkeby__meta(block: rinkeby_Block_height): rinkeby__Meta_
}

type Subscription {
  stagingkovan_asset(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingkovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingkovan_Asset
  stagingkovan_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingkovan_Asset_orderBy
    orderDirection: stagingkovan_OrderDirection
    where: stagingkovan_Asset_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingkovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingkovan_Asset!]!
  stagingkovan_assetBalance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingkovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingkovan_AssetBalance
  stagingkovan_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingkovan_AssetBalance_orderBy
    orderDirection: stagingkovan_OrderDirection
    where: stagingkovan_AssetBalance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingkovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingkovan_AssetBalance!]!
  stagingkovan_router(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingkovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingkovan_Router
  stagingkovan_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingkovan_Router_orderBy
    orderDirection: stagingkovan_OrderDirection
    where: stagingkovan_Router_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingkovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingkovan_Router!]!
  stagingkovan_originTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingkovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingkovan_OriginTransfer
  stagingkovan_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingkovan_OriginTransfer_orderBy
    orderDirection: stagingkovan_OrderDirection
    where: stagingkovan_OriginTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingkovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingkovan_OriginTransfer!]!
  stagingkovan_destinationTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingkovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingkovan_DestinationTransfer
  stagingkovan_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingkovan_DestinationTransfer_orderBy
    orderDirection: stagingkovan_OrderDirection
    where: stagingkovan_DestinationTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingkovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingkovan_DestinationTransfer!]!

  """Access to subgraph metadata"""
  stagingkovan__meta(block: stagingkovan_Block_height): stagingkovan__Meta_
  kovan_asset(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: kovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): kovan_Asset
  kovan_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: kovan_Asset_orderBy
    orderDirection: kovan_OrderDirection
    where: kovan_Asset_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: kovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [kovan_Asset!]!
  kovan_assetBalance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: kovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): kovan_AssetBalance
  kovan_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: kovan_AssetBalance_orderBy
    orderDirection: kovan_OrderDirection
    where: kovan_AssetBalance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: kovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [kovan_AssetBalance!]!
  kovan_router(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: kovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): kovan_Router
  kovan_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: kovan_Router_orderBy
    orderDirection: kovan_OrderDirection
    where: kovan_Router_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: kovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [kovan_Router!]!
  kovan_originTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: kovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): kovan_OriginTransfer
  kovan_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: kovan_OriginTransfer_orderBy
    orderDirection: kovan_OrderDirection
    where: kovan_OriginTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: kovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [kovan_OriginTransfer!]!
  kovan_destinationTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: kovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): kovan_DestinationTransfer
  kovan_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: kovan_DestinationTransfer_orderBy
    orderDirection: kovan_OrderDirection
    where: kovan_DestinationTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: kovan_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [kovan_DestinationTransfer!]!

  """Access to subgraph metadata"""
  kovan__meta(block: kovan_Block_height): kovan__Meta_
  stagingrinkeby_asset(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingrinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingrinkeby_Asset
  stagingrinkeby_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingrinkeby_Asset_orderBy
    orderDirection: stagingrinkeby_OrderDirection
    where: stagingrinkeby_Asset_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingrinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingrinkeby_Asset!]!
  stagingrinkeby_assetBalance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingrinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingrinkeby_AssetBalance
  stagingrinkeby_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingrinkeby_AssetBalance_orderBy
    orderDirection: stagingrinkeby_OrderDirection
    where: stagingrinkeby_AssetBalance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingrinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingrinkeby_AssetBalance!]!
  stagingrinkeby_router(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingrinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingrinkeby_Router
  stagingrinkeby_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingrinkeby_Router_orderBy
    orderDirection: stagingrinkeby_OrderDirection
    where: stagingrinkeby_Router_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingrinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingrinkeby_Router!]!
  stagingrinkeby_originTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingrinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingrinkeby_OriginTransfer
  stagingrinkeby_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingrinkeby_OriginTransfer_orderBy
    orderDirection: stagingrinkeby_OrderDirection
    where: stagingrinkeby_OriginTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingrinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingrinkeby_OriginTransfer!]!
  stagingrinkeby_destinationTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingrinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingrinkeby_DestinationTransfer
  stagingrinkeby_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingrinkeby_DestinationTransfer_orderBy
    orderDirection: stagingrinkeby_OrderDirection
    where: stagingrinkeby_DestinationTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingrinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingrinkeby_DestinationTransfer!]!

  """Access to subgraph metadata"""
  stagingrinkeby__meta(block: stagingrinkeby_Block_height): stagingrinkeby__Meta_
  goerli_asset(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Asset
  goerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Asset_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Asset_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Asset!]!
  goerli_assetBalance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_AssetBalance
  goerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AssetBalance_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AssetBalance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_AssetBalance!]!
  goerli_router(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_Router
  goerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_Router_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_Router_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_Router!]!
  goerli_originTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_OriginTransfer
  goerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OriginTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OriginTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_OriginTransfer!]!
  goerli_destinationTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_DestinationTransfer
  goerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_DestinationTransfer_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_DestinationTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_DestinationTransfer!]!

  """Access to subgraph metadata"""
  goerli__meta(block: goerli_Block_height): goerli__Meta_
  staginggoerli_asset(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Asset
  staginggoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Asset_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Asset_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Asset!]!
  staginggoerli_assetBalance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_AssetBalance
  staginggoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_AssetBalance_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_AssetBalance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_AssetBalance!]!
  staginggoerli_router(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_Router
  staginggoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_Router_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_Router_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_Router!]!
  staginggoerli_originTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_OriginTransfer
  staginggoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_OriginTransfer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_OriginTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_OriginTransfer!]!
  staginggoerli_destinationTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): staginggoerli_DestinationTransfer
  staginggoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: staginggoerli_DestinationTransfer_orderBy
    orderDirection: staginggoerli_OrderDirection
    where: staginggoerli_DestinationTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: staginggoerli_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [staginggoerli_DestinationTransfer!]!

  """Access to subgraph metadata"""
  staginggoerli__meta(block: staginggoerli_Block_height): staginggoerli__Meta_
  rinkeby_asset(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_Asset
  rinkeby_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Asset_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Asset_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_Asset!]!
  rinkeby_assetBalance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_AssetBalance
  rinkeby_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_AssetBalance_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_AssetBalance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_AssetBalance!]!
  rinkeby_router(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_Router
  rinkeby_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_Router_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_Router_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_Router!]!
  rinkeby_originTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_OriginTransfer
  rinkeby_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_OriginTransfer_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_OriginTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_OriginTransfer!]!
  rinkeby_destinationTransfer(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): rinkeby_DestinationTransfer
  rinkeby_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: rinkeby_DestinationTransfer_orderBy
    orderDirection: rinkeby_OrderDirection
    where: rinkeby_DestinationTransfer_filter

    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: rinkeby_Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [rinkeby_DestinationTransfer!]!

  """Access to subgraph metadata"""
  rinkeby__meta(block: rinkeby_Block_height): rinkeby__Meta_
}

type stagingkovan_Asset {
  id: ID!
  local: stagingkovan_Bytes!
  adoptedAsset: stagingkovan_Bytes!
  canonicalId: stagingkovan_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type stagingkovan_AssetBalance {
  id: ID!
  amount: BigInt!
  router: stagingkovan_Router!
  asset: stagingkovan_Asset!
}

input stagingkovan_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: stagingkovan_BlockChangedFilter
}

enum stagingkovan_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input stagingkovan_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  local: stagingkovan_Bytes
  local_not: stagingkovan_Bytes
  local_in: [stagingkovan_Bytes!]
  local_not_in: [stagingkovan_Bytes!]
  local_contains: stagingkovan_Bytes
  local_not_contains: stagingkovan_Bytes
  adoptedAsset: stagingkovan_Bytes
  adoptedAsset_not: stagingkovan_Bytes
  adoptedAsset_in: [stagingkovan_Bytes!]
  adoptedAsset_not_in: [stagingkovan_Bytes!]
  adoptedAsset_contains: stagingkovan_Bytes
  adoptedAsset_not_contains: stagingkovan_Bytes
  canonicalId: stagingkovan_Bytes
  canonicalId_not: stagingkovan_Bytes
  canonicalId_in: [stagingkovan_Bytes!]
  canonicalId_not_in: [stagingkovan_Bytes!]
  canonicalId_contains: stagingkovan_Bytes
  canonicalId_not_contains: stagingkovan_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: stagingkovan_BlockChangedFilter
}

enum stagingkovan_Asset_orderBy {
  id
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar stagingkovan_BigDecimal

scalar BigInt

input stagingkovan_BlockChangedFilter {
  number_gte: Int!
}

input stagingkovan_Block_height {
  hash: stagingkovan_Bytes
  number: Int
  number_gte: Int
}

scalar stagingkovan_Bytes

type stagingkovan_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingkovan_Bytes
  nonce: BigInt
  to: stagingkovan_Bytes
  callData: stagingkovan_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  forceSlow: Boolean
  receiveLocal: Boolean
  status: stagingkovan_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: stagingkovan_Router_orderBy, orderDirection: stagingkovan_OrderDirection, where: stagingkovan_Router_filter): [stagingkovan_Router!]
  originSender: stagingkovan_Bytes
  transactingAsset: stagingkovan_Bytes
  transactingAmount: BigInt
  localAsset: stagingkovan_Bytes
  localAmount: BigInt
  executedCaller: stagingkovan_Bytes
  executedTransactionHash: stagingkovan_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: stagingkovan_Bytes
  reconciledTransactionHash: stagingkovan_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input stagingkovan_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: stagingkovan_Bytes
  transferId_not: stagingkovan_Bytes
  transferId_in: [stagingkovan_Bytes!]
  transferId_not_in: [stagingkovan_Bytes!]
  transferId_contains: stagingkovan_Bytes
  transferId_not_contains: stagingkovan_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: stagingkovan_Bytes
  to_not: stagingkovan_Bytes
  to_in: [stagingkovan_Bytes!]
  to_not_in: [stagingkovan_Bytes!]
  to_contains: stagingkovan_Bytes
  to_not_contains: stagingkovan_Bytes
  callData: stagingkovan_Bytes
  callData_not: stagingkovan_Bytes
  callData_in: [stagingkovan_Bytes!]
  callData_not_in: [stagingkovan_Bytes!]
  callData_contains: stagingkovan_Bytes
  callData_not_contains: stagingkovan_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  status: stagingkovan_TransferStatus
  status_not: stagingkovan_TransferStatus
  status_in: [stagingkovan_TransferStatus!]
  status_not_in: [stagingkovan_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  originSender: stagingkovan_Bytes
  originSender_not: stagingkovan_Bytes
  originSender_in: [stagingkovan_Bytes!]
  originSender_not_in: [stagingkovan_Bytes!]
  originSender_contains: stagingkovan_Bytes
  originSender_not_contains: stagingkovan_Bytes
  transactingAsset: stagingkovan_Bytes
  transactingAsset_not: stagingkovan_Bytes
  transactingAsset_in: [stagingkovan_Bytes!]
  transactingAsset_not_in: [stagingkovan_Bytes!]
  transactingAsset_contains: stagingkovan_Bytes
  transactingAsset_not_contains: stagingkovan_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: stagingkovan_Bytes
  localAsset_not: stagingkovan_Bytes
  localAsset_in: [stagingkovan_Bytes!]
  localAsset_not_in: [stagingkovan_Bytes!]
  localAsset_contains: stagingkovan_Bytes
  localAsset_not_contains: stagingkovan_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  executedCaller: stagingkovan_Bytes
  executedCaller_not: stagingkovan_Bytes
  executedCaller_in: [stagingkovan_Bytes!]
  executedCaller_not_in: [stagingkovan_Bytes!]
  executedCaller_contains: stagingkovan_Bytes
  executedCaller_not_contains: stagingkovan_Bytes
  executedTransactionHash: stagingkovan_Bytes
  executedTransactionHash_not: stagingkovan_Bytes
  executedTransactionHash_in: [stagingkovan_Bytes!]
  executedTransactionHash_not_in: [stagingkovan_Bytes!]
  executedTransactionHash_contains: stagingkovan_Bytes
  executedTransactionHash_not_contains: stagingkovan_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: stagingkovan_Bytes
  reconciledCaller_not: stagingkovan_Bytes
  reconciledCaller_in: [stagingkovan_Bytes!]
  reconciledCaller_not_in: [stagingkovan_Bytes!]
  reconciledCaller_contains: stagingkovan_Bytes
  reconciledCaller_not_contains: stagingkovan_Bytes
  reconciledTransactionHash: stagingkovan_Bytes
  reconciledTransactionHash_not: stagingkovan_Bytes
  reconciledTransactionHash_in: [stagingkovan_Bytes!]
  reconciledTransactionHash_not_in: [stagingkovan_Bytes!]
  reconciledTransactionHash_contains: stagingkovan_Bytes
  reconciledTransactionHash_not_contains: stagingkovan_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: stagingkovan_BlockChangedFilter
}

enum stagingkovan_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  forceSlow
  receiveLocal
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum stagingkovan_OrderDirection {
  asc
  desc
}

type stagingkovan_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingkovan_Bytes
  nonce: BigInt
  to: stagingkovan_Bytes
  callData: stagingkovan_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  forceSlow: Boolean
  receiveLocal: Boolean
  status: stagingkovan_TransferStatus
  relayerFee: BigInt
  message: stagingkovan_Bytes
  transactingAsset: stagingkovan_Bytes
  transactingAmount: BigInt
  bridgedAsset: stagingkovan_Bytes
  bridgedAmount: BigInt
  caller: stagingkovan_Bytes
  transactionHash: stagingkovan_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input stagingkovan_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: stagingkovan_Bytes
  transferId_not: stagingkovan_Bytes
  transferId_in: [stagingkovan_Bytes!]
  transferId_not_in: [stagingkovan_Bytes!]
  transferId_contains: stagingkovan_Bytes
  transferId_not_contains: stagingkovan_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: stagingkovan_Bytes
  to_not: stagingkovan_Bytes
  to_in: [stagingkovan_Bytes!]
  to_not_in: [stagingkovan_Bytes!]
  to_contains: stagingkovan_Bytes
  to_not_contains: stagingkovan_Bytes
  callData: stagingkovan_Bytes
  callData_not: stagingkovan_Bytes
  callData_in: [stagingkovan_Bytes!]
  callData_not_in: [stagingkovan_Bytes!]
  callData_contains: stagingkovan_Bytes
  callData_not_contains: stagingkovan_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  status: stagingkovan_TransferStatus
  status_not: stagingkovan_TransferStatus
  status_in: [stagingkovan_TransferStatus!]
  status_not_in: [stagingkovan_TransferStatus!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  message: stagingkovan_Bytes
  message_not: stagingkovan_Bytes
  message_in: [stagingkovan_Bytes!]
  message_not_in: [stagingkovan_Bytes!]
  message_contains: stagingkovan_Bytes
  message_not_contains: stagingkovan_Bytes
  transactingAsset: stagingkovan_Bytes
  transactingAsset_not: stagingkovan_Bytes
  transactingAsset_in: [stagingkovan_Bytes!]
  transactingAsset_not_in: [stagingkovan_Bytes!]
  transactingAsset_contains: stagingkovan_Bytes
  transactingAsset_not_contains: stagingkovan_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: stagingkovan_Bytes
  bridgedAsset_not: stagingkovan_Bytes
  bridgedAsset_in: [stagingkovan_Bytes!]
  bridgedAsset_not_in: [stagingkovan_Bytes!]
  bridgedAsset_contains: stagingkovan_Bytes
  bridgedAsset_not_contains: stagingkovan_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: stagingkovan_Bytes
  caller_not: stagingkovan_Bytes
  caller_in: [stagingkovan_Bytes!]
  caller_not_in: [stagingkovan_Bytes!]
  caller_contains: stagingkovan_Bytes
  caller_not_contains: stagingkovan_Bytes
  transactionHash: stagingkovan_Bytes
  transactionHash_not: stagingkovan_Bytes
  transactionHash_in: [stagingkovan_Bytes!]
  transactionHash_not_in: [stagingkovan_Bytes!]
  transactionHash_contains: stagingkovan_Bytes
  transactionHash_not_contains: stagingkovan_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: stagingkovan_BlockChangedFilter
}

enum stagingkovan_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  forceSlow
  receiveLocal
  status
  relayerFee
  message
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type stagingkovan_Router {
  id: ID!
  isActive: Boolean!
  owner: stagingkovan_Bytes
  recipient: stagingkovan_Bytes
  proposedOwner: stagingkovan_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: stagingkovan_AssetBalance_orderBy, orderDirection: stagingkovan_OrderDirection, where: stagingkovan_AssetBalance_filter): [stagingkovan_AssetBalance!]!
}

input stagingkovan_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: stagingkovan_Bytes
  owner_not: stagingkovan_Bytes
  owner_in: [stagingkovan_Bytes!]
  owner_not_in: [stagingkovan_Bytes!]
  owner_contains: stagingkovan_Bytes
  owner_not_contains: stagingkovan_Bytes
  recipient: stagingkovan_Bytes
  recipient_not: stagingkovan_Bytes
  recipient_in: [stagingkovan_Bytes!]
  recipient_not_in: [stagingkovan_Bytes!]
  recipient_contains: stagingkovan_Bytes
  recipient_not_contains: stagingkovan_Bytes
  proposedOwner: stagingkovan_Bytes
  proposedOwner_not: stagingkovan_Bytes
  proposedOwner_in: [stagingkovan_Bytes!]
  proposedOwner_not_in: [stagingkovan_Bytes!]
  proposedOwner_contains: stagingkovan_Bytes
  proposedOwner_not_contains: stagingkovan_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: stagingkovan_BlockChangedFilter
}

enum stagingkovan_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

enum stagingkovan_TransferStatus {
  XCalled
  Executed
  Reconciled
  Completed
}

type stagingkovan__Block_ {
  """The hash of the block"""
  hash: stagingkovan_Bytes

  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type stagingkovan__Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: stagingkovan__Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type kovan_Asset {
  id: ID!
  local: kovan_Bytes!
  adoptedAsset: kovan_Bytes!
  canonicalId: kovan_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type kovan_AssetBalance {
  id: ID!
  amount: BigInt!
  router: kovan_Router!
  asset: kovan_Asset!
}

input kovan_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: kovan_BlockChangedFilter
}

enum kovan_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input kovan_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  local: kovan_Bytes
  local_not: kovan_Bytes
  local_in: [kovan_Bytes!]
  local_not_in: [kovan_Bytes!]
  local_contains: kovan_Bytes
  local_not_contains: kovan_Bytes
  adoptedAsset: kovan_Bytes
  adoptedAsset_not: kovan_Bytes
  adoptedAsset_in: [kovan_Bytes!]
  adoptedAsset_not_in: [kovan_Bytes!]
  adoptedAsset_contains: kovan_Bytes
  adoptedAsset_not_contains: kovan_Bytes
  canonicalId: kovan_Bytes
  canonicalId_not: kovan_Bytes
  canonicalId_in: [kovan_Bytes!]
  canonicalId_not_in: [kovan_Bytes!]
  canonicalId_contains: kovan_Bytes
  canonicalId_not_contains: kovan_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: kovan_BlockChangedFilter
}

enum kovan_Asset_orderBy {
  id
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar kovan_BigDecimal

input kovan_BlockChangedFilter {
  number_gte: Int!
}

input kovan_Block_height {
  hash: kovan_Bytes
  number: Int
  number_gte: Int
}

scalar kovan_Bytes

type kovan_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: kovan_Bytes
  nonce: BigInt
  to: kovan_Bytes
  callData: kovan_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  status: kovan_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: kovan_Router_orderBy, orderDirection: kovan_OrderDirection, where: kovan_Router_filter): [kovan_Router!]
  originSender: kovan_Bytes
  transactingAsset: kovan_Bytes
  transactingAmount: BigInt
  localAsset: kovan_Bytes
  localAmount: BigInt
  executedCaller: kovan_Bytes
  executedTransactionHash: kovan_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: kovan_Bytes
  reconciledTransactionHash: kovan_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input kovan_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: kovan_Bytes
  transferId_not: kovan_Bytes
  transferId_in: [kovan_Bytes!]
  transferId_not_in: [kovan_Bytes!]
  transferId_contains: kovan_Bytes
  transferId_not_contains: kovan_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: kovan_Bytes
  to_not: kovan_Bytes
  to_in: [kovan_Bytes!]
  to_not_in: [kovan_Bytes!]
  to_contains: kovan_Bytes
  to_not_contains: kovan_Bytes
  callData: kovan_Bytes
  callData_not: kovan_Bytes
  callData_in: [kovan_Bytes!]
  callData_not_in: [kovan_Bytes!]
  callData_contains: kovan_Bytes
  callData_not_contains: kovan_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  status: kovan_TransferStatus
  status_not: kovan_TransferStatus
  status_in: [kovan_TransferStatus!]
  status_not_in: [kovan_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  originSender: kovan_Bytes
  originSender_not: kovan_Bytes
  originSender_in: [kovan_Bytes!]
  originSender_not_in: [kovan_Bytes!]
  originSender_contains: kovan_Bytes
  originSender_not_contains: kovan_Bytes
  transactingAsset: kovan_Bytes
  transactingAsset_not: kovan_Bytes
  transactingAsset_in: [kovan_Bytes!]
  transactingAsset_not_in: [kovan_Bytes!]
  transactingAsset_contains: kovan_Bytes
  transactingAsset_not_contains: kovan_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: kovan_Bytes
  localAsset_not: kovan_Bytes
  localAsset_in: [kovan_Bytes!]
  localAsset_not_in: [kovan_Bytes!]
  localAsset_contains: kovan_Bytes
  localAsset_not_contains: kovan_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  executedCaller: kovan_Bytes
  executedCaller_not: kovan_Bytes
  executedCaller_in: [kovan_Bytes!]
  executedCaller_not_in: [kovan_Bytes!]
  executedCaller_contains: kovan_Bytes
  executedCaller_not_contains: kovan_Bytes
  executedTransactionHash: kovan_Bytes
  executedTransactionHash_not: kovan_Bytes
  executedTransactionHash_in: [kovan_Bytes!]
  executedTransactionHash_not_in: [kovan_Bytes!]
  executedTransactionHash_contains: kovan_Bytes
  executedTransactionHash_not_contains: kovan_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: kovan_Bytes
  reconciledCaller_not: kovan_Bytes
  reconciledCaller_in: [kovan_Bytes!]
  reconciledCaller_not_in: [kovan_Bytes!]
  reconciledCaller_contains: kovan_Bytes
  reconciledCaller_not_contains: kovan_Bytes
  reconciledTransactionHash: kovan_Bytes
  reconciledTransactionHash_not: kovan_Bytes
  reconciledTransactionHash_in: [kovan_Bytes!]
  reconciledTransactionHash_not_in: [kovan_Bytes!]
  reconciledTransactionHash_contains: kovan_Bytes
  reconciledTransactionHash_not_contains: kovan_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: kovan_BlockChangedFilter
}

enum kovan_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum kovan_OrderDirection {
  asc
  desc
}

type kovan_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: kovan_Bytes
  nonce: BigInt
  to: kovan_Bytes
  callData: kovan_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  status: kovan_TransferStatus
  relayerFee: BigInt
  message: kovan_Bytes
  transactingAsset: kovan_Bytes
  transactingAmount: BigInt
  bridgedAsset: kovan_Bytes
  bridgedAmount: BigInt
  caller: kovan_Bytes
  transactionHash: kovan_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input kovan_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: kovan_Bytes
  transferId_not: kovan_Bytes
  transferId_in: [kovan_Bytes!]
  transferId_not_in: [kovan_Bytes!]
  transferId_contains: kovan_Bytes
  transferId_not_contains: kovan_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: kovan_Bytes
  to_not: kovan_Bytes
  to_in: [kovan_Bytes!]
  to_not_in: [kovan_Bytes!]
  to_contains: kovan_Bytes
  to_not_contains: kovan_Bytes
  callData: kovan_Bytes
  callData_not: kovan_Bytes
  callData_in: [kovan_Bytes!]
  callData_not_in: [kovan_Bytes!]
  callData_contains: kovan_Bytes
  callData_not_contains: kovan_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  status: kovan_TransferStatus
  status_not: kovan_TransferStatus
  status_in: [kovan_TransferStatus!]
  status_not_in: [kovan_TransferStatus!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  message: kovan_Bytes
  message_not: kovan_Bytes
  message_in: [kovan_Bytes!]
  message_not_in: [kovan_Bytes!]
  message_contains: kovan_Bytes
  message_not_contains: kovan_Bytes
  transactingAsset: kovan_Bytes
  transactingAsset_not: kovan_Bytes
  transactingAsset_in: [kovan_Bytes!]
  transactingAsset_not_in: [kovan_Bytes!]
  transactingAsset_contains: kovan_Bytes
  transactingAsset_not_contains: kovan_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: kovan_Bytes
  bridgedAsset_not: kovan_Bytes
  bridgedAsset_in: [kovan_Bytes!]
  bridgedAsset_not_in: [kovan_Bytes!]
  bridgedAsset_contains: kovan_Bytes
  bridgedAsset_not_contains: kovan_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: kovan_Bytes
  caller_not: kovan_Bytes
  caller_in: [kovan_Bytes!]
  caller_not_in: [kovan_Bytes!]
  caller_contains: kovan_Bytes
  caller_not_contains: kovan_Bytes
  transactionHash: kovan_Bytes
  transactionHash_not: kovan_Bytes
  transactionHash_in: [kovan_Bytes!]
  transactionHash_not_in: [kovan_Bytes!]
  transactionHash_contains: kovan_Bytes
  transactionHash_not_contains: kovan_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: kovan_BlockChangedFilter
}

enum kovan_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  status
  relayerFee
  message
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type kovan_Router {
  id: ID!
  isActive: Boolean!
  owner: kovan_Bytes
  recipient: kovan_Bytes
  proposedOwner: kovan_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: kovan_AssetBalance_orderBy, orderDirection: kovan_OrderDirection, where: kovan_AssetBalance_filter): [kovan_AssetBalance!]!
}

input kovan_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: kovan_Bytes
  owner_not: kovan_Bytes
  owner_in: [kovan_Bytes!]
  owner_not_in: [kovan_Bytes!]
  owner_contains: kovan_Bytes
  owner_not_contains: kovan_Bytes
  recipient: kovan_Bytes
  recipient_not: kovan_Bytes
  recipient_in: [kovan_Bytes!]
  recipient_not_in: [kovan_Bytes!]
  recipient_contains: kovan_Bytes
  recipient_not_contains: kovan_Bytes
  proposedOwner: kovan_Bytes
  proposedOwner_not: kovan_Bytes
  proposedOwner_in: [kovan_Bytes!]
  proposedOwner_not_in: [kovan_Bytes!]
  proposedOwner_contains: kovan_Bytes
  proposedOwner_not_contains: kovan_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: kovan_BlockChangedFilter
}

enum kovan_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

enum kovan_TransferStatus {
  XCalled
  Executed
  Reconciled
  Completed
}

type kovan__Block_ {
  """The hash of the block"""
  hash: kovan_Bytes

  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type kovan__Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: kovan__Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type stagingrinkeby_Asset {
  id: ID!
  local: stagingrinkeby_Bytes!
  adoptedAsset: stagingrinkeby_Bytes!
  canonicalId: stagingrinkeby_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type stagingrinkeby_AssetBalance {
  id: ID!
  amount: BigInt!
  router: stagingrinkeby_Router!
  asset: stagingrinkeby_Asset!
}

input stagingrinkeby_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: stagingrinkeby_BlockChangedFilter
}

enum stagingrinkeby_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input stagingrinkeby_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  local: stagingrinkeby_Bytes
  local_not: stagingrinkeby_Bytes
  local_in: [stagingrinkeby_Bytes!]
  local_not_in: [stagingrinkeby_Bytes!]
  local_contains: stagingrinkeby_Bytes
  local_not_contains: stagingrinkeby_Bytes
  adoptedAsset: stagingrinkeby_Bytes
  adoptedAsset_not: stagingrinkeby_Bytes
  adoptedAsset_in: [stagingrinkeby_Bytes!]
  adoptedAsset_not_in: [stagingrinkeby_Bytes!]
  adoptedAsset_contains: stagingrinkeby_Bytes
  adoptedAsset_not_contains: stagingrinkeby_Bytes
  canonicalId: stagingrinkeby_Bytes
  canonicalId_not: stagingrinkeby_Bytes
  canonicalId_in: [stagingrinkeby_Bytes!]
  canonicalId_not_in: [stagingrinkeby_Bytes!]
  canonicalId_contains: stagingrinkeby_Bytes
  canonicalId_not_contains: stagingrinkeby_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: stagingrinkeby_BlockChangedFilter
}

enum stagingrinkeby_Asset_orderBy {
  id
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar stagingrinkeby_BigDecimal

input stagingrinkeby_BlockChangedFilter {
  number_gte: Int!
}

input stagingrinkeby_Block_height {
  hash: stagingrinkeby_Bytes
  number: Int
  number_gte: Int
}

scalar stagingrinkeby_Bytes

type stagingrinkeby_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingrinkeby_Bytes
  nonce: BigInt
  to: stagingrinkeby_Bytes
  callData: stagingrinkeby_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  forceSlow: Boolean
  receiveLocal: Boolean
  status: stagingrinkeby_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: stagingrinkeby_Router_orderBy, orderDirection: stagingrinkeby_OrderDirection, where: stagingrinkeby_Router_filter): [stagingrinkeby_Router!]
  originSender: stagingrinkeby_Bytes
  transactingAsset: stagingrinkeby_Bytes
  transactingAmount: BigInt
  localAsset: stagingrinkeby_Bytes
  localAmount: BigInt
  executedCaller: stagingrinkeby_Bytes
  executedTransactionHash: stagingrinkeby_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: stagingrinkeby_Bytes
  reconciledTransactionHash: stagingrinkeby_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input stagingrinkeby_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: stagingrinkeby_Bytes
  transferId_not: stagingrinkeby_Bytes
  transferId_in: [stagingrinkeby_Bytes!]
  transferId_not_in: [stagingrinkeby_Bytes!]
  transferId_contains: stagingrinkeby_Bytes
  transferId_not_contains: stagingrinkeby_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: stagingrinkeby_Bytes
  to_not: stagingrinkeby_Bytes
  to_in: [stagingrinkeby_Bytes!]
  to_not_in: [stagingrinkeby_Bytes!]
  to_contains: stagingrinkeby_Bytes
  to_not_contains: stagingrinkeby_Bytes
  callData: stagingrinkeby_Bytes
  callData_not: stagingrinkeby_Bytes
  callData_in: [stagingrinkeby_Bytes!]
  callData_not_in: [stagingrinkeby_Bytes!]
  callData_contains: stagingrinkeby_Bytes
  callData_not_contains: stagingrinkeby_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  status: stagingrinkeby_TransferStatus
  status_not: stagingrinkeby_TransferStatus
  status_in: [stagingrinkeby_TransferStatus!]
  status_not_in: [stagingrinkeby_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  originSender: stagingrinkeby_Bytes
  originSender_not: stagingrinkeby_Bytes
  originSender_in: [stagingrinkeby_Bytes!]
  originSender_not_in: [stagingrinkeby_Bytes!]
  originSender_contains: stagingrinkeby_Bytes
  originSender_not_contains: stagingrinkeby_Bytes
  transactingAsset: stagingrinkeby_Bytes
  transactingAsset_not: stagingrinkeby_Bytes
  transactingAsset_in: [stagingrinkeby_Bytes!]
  transactingAsset_not_in: [stagingrinkeby_Bytes!]
  transactingAsset_contains: stagingrinkeby_Bytes
  transactingAsset_not_contains: stagingrinkeby_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: stagingrinkeby_Bytes
  localAsset_not: stagingrinkeby_Bytes
  localAsset_in: [stagingrinkeby_Bytes!]
  localAsset_not_in: [stagingrinkeby_Bytes!]
  localAsset_contains: stagingrinkeby_Bytes
  localAsset_not_contains: stagingrinkeby_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  executedCaller: stagingrinkeby_Bytes
  executedCaller_not: stagingrinkeby_Bytes
  executedCaller_in: [stagingrinkeby_Bytes!]
  executedCaller_not_in: [stagingrinkeby_Bytes!]
  executedCaller_contains: stagingrinkeby_Bytes
  executedCaller_not_contains: stagingrinkeby_Bytes
  executedTransactionHash: stagingrinkeby_Bytes
  executedTransactionHash_not: stagingrinkeby_Bytes
  executedTransactionHash_in: [stagingrinkeby_Bytes!]
  executedTransactionHash_not_in: [stagingrinkeby_Bytes!]
  executedTransactionHash_contains: stagingrinkeby_Bytes
  executedTransactionHash_not_contains: stagingrinkeby_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: stagingrinkeby_Bytes
  reconciledCaller_not: stagingrinkeby_Bytes
  reconciledCaller_in: [stagingrinkeby_Bytes!]
  reconciledCaller_not_in: [stagingrinkeby_Bytes!]
  reconciledCaller_contains: stagingrinkeby_Bytes
  reconciledCaller_not_contains: stagingrinkeby_Bytes
  reconciledTransactionHash: stagingrinkeby_Bytes
  reconciledTransactionHash_not: stagingrinkeby_Bytes
  reconciledTransactionHash_in: [stagingrinkeby_Bytes!]
  reconciledTransactionHash_not_in: [stagingrinkeby_Bytes!]
  reconciledTransactionHash_contains: stagingrinkeby_Bytes
  reconciledTransactionHash_not_contains: stagingrinkeby_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: stagingrinkeby_BlockChangedFilter
}

enum stagingrinkeby_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  forceSlow
  receiveLocal
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum stagingrinkeby_OrderDirection {
  asc
  desc
}

type stagingrinkeby_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: stagingrinkeby_Bytes
  nonce: BigInt
  to: stagingrinkeby_Bytes
  callData: stagingrinkeby_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  forceSlow: Boolean
  receiveLocal: Boolean
  status: stagingrinkeby_TransferStatus
  relayerFee: BigInt
  message: stagingrinkeby_Bytes
  transactingAsset: stagingrinkeby_Bytes
  transactingAmount: BigInt
  bridgedAsset: stagingrinkeby_Bytes
  bridgedAmount: BigInt
  caller: stagingrinkeby_Bytes
  transactionHash: stagingrinkeby_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input stagingrinkeby_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: stagingrinkeby_Bytes
  transferId_not: stagingrinkeby_Bytes
  transferId_in: [stagingrinkeby_Bytes!]
  transferId_not_in: [stagingrinkeby_Bytes!]
  transferId_contains: stagingrinkeby_Bytes
  transferId_not_contains: stagingrinkeby_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: stagingrinkeby_Bytes
  to_not: stagingrinkeby_Bytes
  to_in: [stagingrinkeby_Bytes!]
  to_not_in: [stagingrinkeby_Bytes!]
  to_contains: stagingrinkeby_Bytes
  to_not_contains: stagingrinkeby_Bytes
  callData: stagingrinkeby_Bytes
  callData_not: stagingrinkeby_Bytes
  callData_in: [stagingrinkeby_Bytes!]
  callData_not_in: [stagingrinkeby_Bytes!]
  callData_contains: stagingrinkeby_Bytes
  callData_not_contains: stagingrinkeby_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  status: stagingrinkeby_TransferStatus
  status_not: stagingrinkeby_TransferStatus
  status_in: [stagingrinkeby_TransferStatus!]
  status_not_in: [stagingrinkeby_TransferStatus!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  message: stagingrinkeby_Bytes
  message_not: stagingrinkeby_Bytes
  message_in: [stagingrinkeby_Bytes!]
  message_not_in: [stagingrinkeby_Bytes!]
  message_contains: stagingrinkeby_Bytes
  message_not_contains: stagingrinkeby_Bytes
  transactingAsset: stagingrinkeby_Bytes
  transactingAsset_not: stagingrinkeby_Bytes
  transactingAsset_in: [stagingrinkeby_Bytes!]
  transactingAsset_not_in: [stagingrinkeby_Bytes!]
  transactingAsset_contains: stagingrinkeby_Bytes
  transactingAsset_not_contains: stagingrinkeby_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: stagingrinkeby_Bytes
  bridgedAsset_not: stagingrinkeby_Bytes
  bridgedAsset_in: [stagingrinkeby_Bytes!]
  bridgedAsset_not_in: [stagingrinkeby_Bytes!]
  bridgedAsset_contains: stagingrinkeby_Bytes
  bridgedAsset_not_contains: stagingrinkeby_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: stagingrinkeby_Bytes
  caller_not: stagingrinkeby_Bytes
  caller_in: [stagingrinkeby_Bytes!]
  caller_not_in: [stagingrinkeby_Bytes!]
  caller_contains: stagingrinkeby_Bytes
  caller_not_contains: stagingrinkeby_Bytes
  transactionHash: stagingrinkeby_Bytes
  transactionHash_not: stagingrinkeby_Bytes
  transactionHash_in: [stagingrinkeby_Bytes!]
  transactionHash_not_in: [stagingrinkeby_Bytes!]
  transactionHash_contains: stagingrinkeby_Bytes
  transactionHash_not_contains: stagingrinkeby_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: stagingrinkeby_BlockChangedFilter
}

enum stagingrinkeby_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  forceSlow
  receiveLocal
  status
  relayerFee
  message
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type stagingrinkeby_Router {
  id: ID!
  isActive: Boolean!
  owner: stagingrinkeby_Bytes
  recipient: stagingrinkeby_Bytes
  proposedOwner: stagingrinkeby_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: stagingrinkeby_AssetBalance_orderBy, orderDirection: stagingrinkeby_OrderDirection, where: stagingrinkeby_AssetBalance_filter): [stagingrinkeby_AssetBalance!]!
}

input stagingrinkeby_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: stagingrinkeby_Bytes
  owner_not: stagingrinkeby_Bytes
  owner_in: [stagingrinkeby_Bytes!]
  owner_not_in: [stagingrinkeby_Bytes!]
  owner_contains: stagingrinkeby_Bytes
  owner_not_contains: stagingrinkeby_Bytes
  recipient: stagingrinkeby_Bytes
  recipient_not: stagingrinkeby_Bytes
  recipient_in: [stagingrinkeby_Bytes!]
  recipient_not_in: [stagingrinkeby_Bytes!]
  recipient_contains: stagingrinkeby_Bytes
  recipient_not_contains: stagingrinkeby_Bytes
  proposedOwner: stagingrinkeby_Bytes
  proposedOwner_not: stagingrinkeby_Bytes
  proposedOwner_in: [stagingrinkeby_Bytes!]
  proposedOwner_not_in: [stagingrinkeby_Bytes!]
  proposedOwner_contains: stagingrinkeby_Bytes
  proposedOwner_not_contains: stagingrinkeby_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: stagingrinkeby_BlockChangedFilter
}

enum stagingrinkeby_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

enum stagingrinkeby_TransferStatus {
  XCalled
  Executed
  Reconciled
  Completed
}

type stagingrinkeby__Block_ {
  """The hash of the block"""
  hash: stagingrinkeby_Bytes

  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type stagingrinkeby__Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: stagingrinkeby__Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type goerli_Asset {
  id: ID!
  local: goerli_Bytes!
  adoptedAsset: goerli_Bytes!
  canonicalId: goerli_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type goerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: goerli_Router!
  asset: goerli_Asset!
}

input goerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input goerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  local: goerli_Bytes
  local_not: goerli_Bytes
  local_in: [goerli_Bytes!]
  local_not_in: [goerli_Bytes!]
  local_contains: goerli_Bytes
  local_not_contains: goerli_Bytes
  adoptedAsset: goerli_Bytes
  adoptedAsset_not: goerli_Bytes
  adoptedAsset_in: [goerli_Bytes!]
  adoptedAsset_not_in: [goerli_Bytes!]
  adoptedAsset_contains: goerli_Bytes
  adoptedAsset_not_contains: goerli_Bytes
  canonicalId: goerli_Bytes
  canonicalId_not: goerli_Bytes
  canonicalId_in: [goerli_Bytes!]
  canonicalId_not_in: [goerli_Bytes!]
  canonicalId_contains: goerli_Bytes
  canonicalId_not_contains: goerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Asset_orderBy {
  id
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar goerli_BigDecimal

input goerli_BlockChangedFilter {
  number_gte: Int!
}

input goerli_Block_height {
  hash: goerli_Bytes
  number: Int
  number_gte: Int
}

scalar goerli_Bytes

type goerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: goerli_Bytes
  nonce: BigInt
  to: goerli_Bytes
  callData: goerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  status: goerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: goerli_Router_orderBy, orderDirection: goerli_OrderDirection, where: goerli_Router_filter): [goerli_Router!]
  originSender: goerli_Bytes
  transactingAsset: goerli_Bytes
  transactingAmount: BigInt
  localAsset: goerli_Bytes
  localAmount: BigInt
  executedCaller: goerli_Bytes
  executedTransactionHash: goerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: goerli_Bytes
  reconciledTransactionHash: goerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input goerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: goerli_Bytes
  transferId_not: goerli_Bytes
  transferId_in: [goerli_Bytes!]
  transferId_not_in: [goerli_Bytes!]
  transferId_contains: goerli_Bytes
  transferId_not_contains: goerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: goerli_Bytes
  to_not: goerli_Bytes
  to_in: [goerli_Bytes!]
  to_not_in: [goerli_Bytes!]
  to_contains: goerli_Bytes
  to_not_contains: goerli_Bytes
  callData: goerli_Bytes
  callData_not: goerli_Bytes
  callData_in: [goerli_Bytes!]
  callData_not_in: [goerli_Bytes!]
  callData_contains: goerli_Bytes
  callData_not_contains: goerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  status: goerli_TransferStatus
  status_not: goerli_TransferStatus
  status_in: [goerli_TransferStatus!]
  status_not_in: [goerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  originSender: goerli_Bytes
  originSender_not: goerli_Bytes
  originSender_in: [goerli_Bytes!]
  originSender_not_in: [goerli_Bytes!]
  originSender_contains: goerli_Bytes
  originSender_not_contains: goerli_Bytes
  transactingAsset: goerli_Bytes
  transactingAsset_not: goerli_Bytes
  transactingAsset_in: [goerli_Bytes!]
  transactingAsset_not_in: [goerli_Bytes!]
  transactingAsset_contains: goerli_Bytes
  transactingAsset_not_contains: goerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: goerli_Bytes
  localAsset_not: goerli_Bytes
  localAsset_in: [goerli_Bytes!]
  localAsset_not_in: [goerli_Bytes!]
  localAsset_contains: goerli_Bytes
  localAsset_not_contains: goerli_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  executedCaller: goerli_Bytes
  executedCaller_not: goerli_Bytes
  executedCaller_in: [goerli_Bytes!]
  executedCaller_not_in: [goerli_Bytes!]
  executedCaller_contains: goerli_Bytes
  executedCaller_not_contains: goerli_Bytes
  executedTransactionHash: goerli_Bytes
  executedTransactionHash_not: goerli_Bytes
  executedTransactionHash_in: [goerli_Bytes!]
  executedTransactionHash_not_in: [goerli_Bytes!]
  executedTransactionHash_contains: goerli_Bytes
  executedTransactionHash_not_contains: goerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: goerli_Bytes
  reconciledCaller_not: goerli_Bytes
  reconciledCaller_in: [goerli_Bytes!]
  reconciledCaller_not_in: [goerli_Bytes!]
  reconciledCaller_contains: goerli_Bytes
  reconciledCaller_not_contains: goerli_Bytes
  reconciledTransactionHash: goerli_Bytes
  reconciledTransactionHash_not: goerli_Bytes
  reconciledTransactionHash_in: [goerli_Bytes!]
  reconciledTransactionHash_not_in: [goerli_Bytes!]
  reconciledTransactionHash_contains: goerli_Bytes
  reconciledTransactionHash_not_contains: goerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum goerli_OrderDirection {
  asc
  desc
}

type goerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: goerli_Bytes
  nonce: BigInt
  to: goerli_Bytes
  callData: goerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  status: goerli_TransferStatus
  relayerFee: BigInt
  message: goerli_Bytes
  transactingAsset: goerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: goerli_Bytes
  bridgedAmount: BigInt
  caller: goerli_Bytes
  transactionHash: goerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input goerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: goerli_Bytes
  transferId_not: goerli_Bytes
  transferId_in: [goerli_Bytes!]
  transferId_not_in: [goerli_Bytes!]
  transferId_contains: goerli_Bytes
  transferId_not_contains: goerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: goerli_Bytes
  to_not: goerli_Bytes
  to_in: [goerli_Bytes!]
  to_not_in: [goerli_Bytes!]
  to_contains: goerli_Bytes
  to_not_contains: goerli_Bytes
  callData: goerli_Bytes
  callData_not: goerli_Bytes
  callData_in: [goerli_Bytes!]
  callData_not_in: [goerli_Bytes!]
  callData_contains: goerli_Bytes
  callData_not_contains: goerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  status: goerli_TransferStatus
  status_not: goerli_TransferStatus
  status_in: [goerli_TransferStatus!]
  status_not_in: [goerli_TransferStatus!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  message: goerli_Bytes
  message_not: goerli_Bytes
  message_in: [goerli_Bytes!]
  message_not_in: [goerli_Bytes!]
  message_contains: goerli_Bytes
  message_not_contains: goerli_Bytes
  transactingAsset: goerli_Bytes
  transactingAsset_not: goerli_Bytes
  transactingAsset_in: [goerli_Bytes!]
  transactingAsset_not_in: [goerli_Bytes!]
  transactingAsset_contains: goerli_Bytes
  transactingAsset_not_contains: goerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: goerli_Bytes
  bridgedAsset_not: goerli_Bytes
  bridgedAsset_in: [goerli_Bytes!]
  bridgedAsset_not_in: [goerli_Bytes!]
  bridgedAsset_contains: goerli_Bytes
  bridgedAsset_not_contains: goerli_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: goerli_Bytes
  caller_not: goerli_Bytes
  caller_in: [goerli_Bytes!]
  caller_not_in: [goerli_Bytes!]
  caller_contains: goerli_Bytes
  caller_not_contains: goerli_Bytes
  transactionHash: goerli_Bytes
  transactionHash_not: goerli_Bytes
  transactionHash_in: [goerli_Bytes!]
  transactionHash_not_in: [goerli_Bytes!]
  transactionHash_contains: goerli_Bytes
  transactionHash_not_contains: goerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  status
  relayerFee
  message
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type goerli_Router {
  id: ID!
  isActive: Boolean!
  owner: goerli_Bytes
  recipient: goerli_Bytes
  proposedOwner: goerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: goerli_AssetBalance_orderBy, orderDirection: goerli_OrderDirection, where: goerli_AssetBalance_filter): [goerli_AssetBalance!]!
}

input goerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: goerli_Bytes
  owner_not: goerli_Bytes
  owner_in: [goerli_Bytes!]
  owner_not_in: [goerli_Bytes!]
  owner_contains: goerli_Bytes
  owner_not_contains: goerli_Bytes
  recipient: goerli_Bytes
  recipient_not: goerli_Bytes
  recipient_in: [goerli_Bytes!]
  recipient_not_in: [goerli_Bytes!]
  recipient_contains: goerli_Bytes
  recipient_not_contains: goerli_Bytes
  proposedOwner: goerli_Bytes
  proposedOwner_not: goerli_Bytes
  proposedOwner_in: [goerli_Bytes!]
  proposedOwner_not_in: [goerli_Bytes!]
  proposedOwner_contains: goerli_Bytes
  proposedOwner_not_contains: goerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
}

enum goerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

enum goerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  Completed
}

type goerli__Block_ {
  """The hash of the block"""
  hash: goerli_Bytes

  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type goerli__Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: goerli__Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type staginggoerli_Asset {
  id: ID!
  local: staginggoerli_Bytes!
  adoptedAsset: staginggoerli_Bytes!
  canonicalId: staginggoerli_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type staginggoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: staginggoerli_Router!
  asset: staginggoerli_Asset!
}

input staginggoerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input staginggoerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  local: staginggoerli_Bytes
  local_not: staginggoerli_Bytes
  local_in: [staginggoerli_Bytes!]
  local_not_in: [staginggoerli_Bytes!]
  local_contains: staginggoerli_Bytes
  local_not_contains: staginggoerli_Bytes
  adoptedAsset: staginggoerli_Bytes
  adoptedAsset_not: staginggoerli_Bytes
  adoptedAsset_in: [staginggoerli_Bytes!]
  adoptedAsset_not_in: [staginggoerli_Bytes!]
  adoptedAsset_contains: staginggoerli_Bytes
  adoptedAsset_not_contains: staginggoerli_Bytes
  canonicalId: staginggoerli_Bytes
  canonicalId_not: staginggoerli_Bytes
  canonicalId_in: [staginggoerli_Bytes!]
  canonicalId_not_in: [staginggoerli_Bytes!]
  canonicalId_contains: staginggoerli_Bytes
  canonicalId_not_contains: staginggoerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_Asset_orderBy {
  id
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar staginggoerli_BigDecimal

input staginggoerli_BlockChangedFilter {
  number_gte: Int!
}

input staginggoerli_Block_height {
  hash: staginggoerli_Bytes
  number: Int
  number_gte: Int
}

scalar staginggoerli_Bytes

type staginggoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: staginggoerli_Bytes
  nonce: BigInt
  to: staginggoerli_Bytes
  callData: staginggoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  forceSlow: Boolean
  receiveLocal: Boolean
  status: staginggoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: staginggoerli_Router_orderBy, orderDirection: staginggoerli_OrderDirection, where: staginggoerli_Router_filter): [staginggoerli_Router!]
  originSender: staginggoerli_Bytes
  transactingAsset: staginggoerli_Bytes
  transactingAmount: BigInt
  localAsset: staginggoerli_Bytes
  localAmount: BigInt
  executedCaller: staginggoerli_Bytes
  executedTransactionHash: staginggoerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: staginggoerli_Bytes
  reconciledTransactionHash: staginggoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input staginggoerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: staginggoerli_Bytes
  transferId_not: staginggoerli_Bytes
  transferId_in: [staginggoerli_Bytes!]
  transferId_not_in: [staginggoerli_Bytes!]
  transferId_contains: staginggoerli_Bytes
  transferId_not_contains: staginggoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: staginggoerli_Bytes
  to_not: staginggoerli_Bytes
  to_in: [staginggoerli_Bytes!]
  to_not_in: [staginggoerli_Bytes!]
  to_contains: staginggoerli_Bytes
  to_not_contains: staginggoerli_Bytes
  callData: staginggoerli_Bytes
  callData_not: staginggoerli_Bytes
  callData_in: [staginggoerli_Bytes!]
  callData_not_in: [staginggoerli_Bytes!]
  callData_contains: staginggoerli_Bytes
  callData_not_contains: staginggoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  status: staginggoerli_TransferStatus
  status_not: staginggoerli_TransferStatus
  status_in: [staginggoerli_TransferStatus!]
  status_not_in: [staginggoerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  originSender: staginggoerli_Bytes
  originSender_not: staginggoerli_Bytes
  originSender_in: [staginggoerli_Bytes!]
  originSender_not_in: [staginggoerli_Bytes!]
  originSender_contains: staginggoerli_Bytes
  originSender_not_contains: staginggoerli_Bytes
  transactingAsset: staginggoerli_Bytes
  transactingAsset_not: staginggoerli_Bytes
  transactingAsset_in: [staginggoerli_Bytes!]
  transactingAsset_not_in: [staginggoerli_Bytes!]
  transactingAsset_contains: staginggoerli_Bytes
  transactingAsset_not_contains: staginggoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: staginggoerli_Bytes
  localAsset_not: staginggoerli_Bytes
  localAsset_in: [staginggoerli_Bytes!]
  localAsset_not_in: [staginggoerli_Bytes!]
  localAsset_contains: staginggoerli_Bytes
  localAsset_not_contains: staginggoerli_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  executedCaller: staginggoerli_Bytes
  executedCaller_not: staginggoerli_Bytes
  executedCaller_in: [staginggoerli_Bytes!]
  executedCaller_not_in: [staginggoerli_Bytes!]
  executedCaller_contains: staginggoerli_Bytes
  executedCaller_not_contains: staginggoerli_Bytes
  executedTransactionHash: staginggoerli_Bytes
  executedTransactionHash_not: staginggoerli_Bytes
  executedTransactionHash_in: [staginggoerli_Bytes!]
  executedTransactionHash_not_in: [staginggoerli_Bytes!]
  executedTransactionHash_contains: staginggoerli_Bytes
  executedTransactionHash_not_contains: staginggoerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: staginggoerli_Bytes
  reconciledCaller_not: staginggoerli_Bytes
  reconciledCaller_in: [staginggoerli_Bytes!]
  reconciledCaller_not_in: [staginggoerli_Bytes!]
  reconciledCaller_contains: staginggoerli_Bytes
  reconciledCaller_not_contains: staginggoerli_Bytes
  reconciledTransactionHash: staginggoerli_Bytes
  reconciledTransactionHash_not: staginggoerli_Bytes
  reconciledTransactionHash_in: [staginggoerli_Bytes!]
  reconciledTransactionHash_not_in: [staginggoerli_Bytes!]
  reconciledTransactionHash_contains: staginggoerli_Bytes
  reconciledTransactionHash_not_contains: staginggoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  forceSlow
  receiveLocal
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum staginggoerli_OrderDirection {
  asc
  desc
}

type staginggoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: staginggoerli_Bytes
  nonce: BigInt
  to: staginggoerli_Bytes
  callData: staginggoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  forceSlow: Boolean
  receiveLocal: Boolean
  status: staginggoerli_TransferStatus
  relayerFee: BigInt
  message: staginggoerli_Bytes
  transactingAsset: staginggoerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: staginggoerli_Bytes
  bridgedAmount: BigInt
  caller: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input staginggoerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: staginggoerli_Bytes
  transferId_not: staginggoerli_Bytes
  transferId_in: [staginggoerli_Bytes!]
  transferId_not_in: [staginggoerli_Bytes!]
  transferId_contains: staginggoerli_Bytes
  transferId_not_contains: staginggoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: staginggoerli_Bytes
  to_not: staginggoerli_Bytes
  to_in: [staginggoerli_Bytes!]
  to_not_in: [staginggoerli_Bytes!]
  to_contains: staginggoerli_Bytes
  to_not_contains: staginggoerli_Bytes
  callData: staginggoerli_Bytes
  callData_not: staginggoerli_Bytes
  callData_in: [staginggoerli_Bytes!]
  callData_not_in: [staginggoerli_Bytes!]
  callData_contains: staginggoerli_Bytes
  callData_not_contains: staginggoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  status: staginggoerli_TransferStatus
  status_not: staginggoerli_TransferStatus
  status_in: [staginggoerli_TransferStatus!]
  status_not_in: [staginggoerli_TransferStatus!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  message: staginggoerli_Bytes
  message_not: staginggoerli_Bytes
  message_in: [staginggoerli_Bytes!]
  message_not_in: [staginggoerli_Bytes!]
  message_contains: staginggoerli_Bytes
  message_not_contains: staginggoerli_Bytes
  transactingAsset: staginggoerli_Bytes
  transactingAsset_not: staginggoerli_Bytes
  transactingAsset_in: [staginggoerli_Bytes!]
  transactingAsset_not_in: [staginggoerli_Bytes!]
  transactingAsset_contains: staginggoerli_Bytes
  transactingAsset_not_contains: staginggoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: staginggoerli_Bytes
  bridgedAsset_not: staginggoerli_Bytes
  bridgedAsset_in: [staginggoerli_Bytes!]
  bridgedAsset_not_in: [staginggoerli_Bytes!]
  bridgedAsset_contains: staginggoerli_Bytes
  bridgedAsset_not_contains: staginggoerli_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: staginggoerli_Bytes
  caller_not: staginggoerli_Bytes
  caller_in: [staginggoerli_Bytes!]
  caller_not_in: [staginggoerli_Bytes!]
  caller_contains: staginggoerli_Bytes
  caller_not_contains: staginggoerli_Bytes
  transactionHash: staginggoerli_Bytes
  transactionHash_not: staginggoerli_Bytes
  transactionHash_in: [staginggoerli_Bytes!]
  transactionHash_not_in: [staginggoerli_Bytes!]
  transactionHash_contains: staginggoerli_Bytes
  transactionHash_not_contains: staginggoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  forceSlow
  receiveLocal
  status
  relayerFee
  message
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type staginggoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: staginggoerli_Bytes
  recipient: staginggoerli_Bytes
  proposedOwner: staginggoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: staginggoerli_AssetBalance_orderBy, orderDirection: staginggoerli_OrderDirection, where: staginggoerli_AssetBalance_filter): [staginggoerli_AssetBalance!]!
}

input staginggoerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: staginggoerli_Bytes
  owner_not: staginggoerli_Bytes
  owner_in: [staginggoerli_Bytes!]
  owner_not_in: [staginggoerli_Bytes!]
  owner_contains: staginggoerli_Bytes
  owner_not_contains: staginggoerli_Bytes
  recipient: staginggoerli_Bytes
  recipient_not: staginggoerli_Bytes
  recipient_in: [staginggoerli_Bytes!]
  recipient_not_in: [staginggoerli_Bytes!]
  recipient_contains: staginggoerli_Bytes
  recipient_not_contains: staginggoerli_Bytes
  proposedOwner: staginggoerli_Bytes
  proposedOwner_not: staginggoerli_Bytes
  proposedOwner_in: [staginggoerli_Bytes!]
  proposedOwner_not_in: [staginggoerli_Bytes!]
  proposedOwner_contains: staginggoerli_Bytes
  proposedOwner_not_contains: staginggoerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: staginggoerli_BlockChangedFilter
}

enum staginggoerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

enum staginggoerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  Completed
}

type staginggoerli__Block_ {
  """The hash of the block"""
  hash: staginggoerli_Bytes

  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type staginggoerli__Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: staginggoerli__Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type rinkeby_Asset {
  id: ID!
  local: rinkeby_Bytes!
  adoptedAsset: rinkeby_Bytes!
  canonicalId: rinkeby_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type rinkeby_AssetBalance {
  id: ID!
  amount: BigInt!
  router: rinkeby_Router!
  asset: rinkeby_Asset!
}

input rinkeby_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String

  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_AssetBalance_orderBy {
  id
  amount
  router
  asset
}

input rinkeby_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  local: rinkeby_Bytes
  local_not: rinkeby_Bytes
  local_in: [rinkeby_Bytes!]
  local_not_in: [rinkeby_Bytes!]
  local_contains: rinkeby_Bytes
  local_not_contains: rinkeby_Bytes
  adoptedAsset: rinkeby_Bytes
  adoptedAsset_not: rinkeby_Bytes
  adoptedAsset_in: [rinkeby_Bytes!]
  adoptedAsset_not_in: [rinkeby_Bytes!]
  adoptedAsset_contains: rinkeby_Bytes
  adoptedAsset_not_contains: rinkeby_Bytes
  canonicalId: rinkeby_Bytes
  canonicalId_not: rinkeby_Bytes
  canonicalId_in: [rinkeby_Bytes!]
  canonicalId_not_in: [rinkeby_Bytes!]
  canonicalId_contains: rinkeby_Bytes
  canonicalId_not_contains: rinkeby_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_Asset_orderBy {
  id
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar rinkeby_BigDecimal

input rinkeby_BlockChangedFilter {
  number_gte: Int!
}

input rinkeby_Block_height {
  hash: rinkeby_Bytes
  number: Int
  number_gte: Int
}

scalar rinkeby_Bytes

type rinkeby_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: rinkeby_Bytes
  nonce: BigInt
  to: rinkeby_Bytes
  callData: rinkeby_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  status: rinkeby_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: rinkeby_Router_orderBy, orderDirection: rinkeby_OrderDirection, where: rinkeby_Router_filter): [rinkeby_Router!]
  originSender: rinkeby_Bytes
  transactingAsset: rinkeby_Bytes
  transactingAmount: BigInt
  localAsset: rinkeby_Bytes
  localAmount: BigInt
  executedCaller: rinkeby_Bytes
  executedTransactionHash: rinkeby_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: rinkeby_Bytes
  reconciledTransactionHash: rinkeby_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input rinkeby_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: rinkeby_Bytes
  transferId_not: rinkeby_Bytes
  transferId_in: [rinkeby_Bytes!]
  transferId_not_in: [rinkeby_Bytes!]
  transferId_contains: rinkeby_Bytes
  transferId_not_contains: rinkeby_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: rinkeby_Bytes
  to_not: rinkeby_Bytes
  to_in: [rinkeby_Bytes!]
  to_not_in: [rinkeby_Bytes!]
  to_contains: rinkeby_Bytes
  to_not_contains: rinkeby_Bytes
  callData: rinkeby_Bytes
  callData_not: rinkeby_Bytes
  callData_in: [rinkeby_Bytes!]
  callData_not_in: [rinkeby_Bytes!]
  callData_contains: rinkeby_Bytes
  callData_not_contains: rinkeby_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  status: rinkeby_TransferStatus
  status_not: rinkeby_TransferStatus
  status_in: [rinkeby_TransferStatus!]
  status_not_in: [rinkeby_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  originSender: rinkeby_Bytes
  originSender_not: rinkeby_Bytes
  originSender_in: [rinkeby_Bytes!]
  originSender_not_in: [rinkeby_Bytes!]
  originSender_contains: rinkeby_Bytes
  originSender_not_contains: rinkeby_Bytes
  transactingAsset: rinkeby_Bytes
  transactingAsset_not: rinkeby_Bytes
  transactingAsset_in: [rinkeby_Bytes!]
  transactingAsset_not_in: [rinkeby_Bytes!]
  transactingAsset_contains: rinkeby_Bytes
  transactingAsset_not_contains: rinkeby_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: rinkeby_Bytes
  localAsset_not: rinkeby_Bytes
  localAsset_in: [rinkeby_Bytes!]
  localAsset_not_in: [rinkeby_Bytes!]
  localAsset_contains: rinkeby_Bytes
  localAsset_not_contains: rinkeby_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  executedCaller: rinkeby_Bytes
  executedCaller_not: rinkeby_Bytes
  executedCaller_in: [rinkeby_Bytes!]
  executedCaller_not_in: [rinkeby_Bytes!]
  executedCaller_contains: rinkeby_Bytes
  executedCaller_not_contains: rinkeby_Bytes
  executedTransactionHash: rinkeby_Bytes
  executedTransactionHash_not: rinkeby_Bytes
  executedTransactionHash_in: [rinkeby_Bytes!]
  executedTransactionHash_not_in: [rinkeby_Bytes!]
  executedTransactionHash_contains: rinkeby_Bytes
  executedTransactionHash_not_contains: rinkeby_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: rinkeby_Bytes
  reconciledCaller_not: rinkeby_Bytes
  reconciledCaller_in: [rinkeby_Bytes!]
  reconciledCaller_not_in: [rinkeby_Bytes!]
  reconciledCaller_contains: rinkeby_Bytes
  reconciledCaller_not_contains: rinkeby_Bytes
  reconciledTransactionHash: rinkeby_Bytes
  reconciledTransactionHash_not: rinkeby_Bytes
  reconciledTransactionHash_in: [rinkeby_Bytes!]
  reconciledTransactionHash_not_in: [rinkeby_Bytes!]
  reconciledTransactionHash_contains: rinkeby_Bytes
  reconciledTransactionHash_not_contains: rinkeby_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""Defines the order direction, either ascending or descending"""
enum rinkeby_OrderDirection {
  asc
  desc
}

type rinkeby_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: rinkeby_Bytes
  nonce: BigInt
  to: rinkeby_Bytes
  callData: rinkeby_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  status: rinkeby_TransferStatus
  relayerFee: BigInt
  message: rinkeby_Bytes
  transactingAsset: rinkeby_Bytes
  transactingAmount: BigInt
  bridgedAsset: rinkeby_Bytes
  bridgedAmount: BigInt
  caller: rinkeby_Bytes
  transactionHash: rinkeby_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input rinkeby_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: rinkeby_Bytes
  transferId_not: rinkeby_Bytes
  transferId_in: [rinkeby_Bytes!]
  transferId_not_in: [rinkeby_Bytes!]
  transferId_contains: rinkeby_Bytes
  transferId_not_contains: rinkeby_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: rinkeby_Bytes
  to_not: rinkeby_Bytes
  to_in: [rinkeby_Bytes!]
  to_not_in: [rinkeby_Bytes!]
  to_contains: rinkeby_Bytes
  to_not_contains: rinkeby_Bytes
  callData: rinkeby_Bytes
  callData_not: rinkeby_Bytes
  callData_in: [rinkeby_Bytes!]
  callData_not_in: [rinkeby_Bytes!]
  callData_contains: rinkeby_Bytes
  callData_not_contains: rinkeby_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  status: rinkeby_TransferStatus
  status_not: rinkeby_TransferStatus
  status_in: [rinkeby_TransferStatus!]
  status_not_in: [rinkeby_TransferStatus!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  message: rinkeby_Bytes
  message_not: rinkeby_Bytes
  message_in: [rinkeby_Bytes!]
  message_not_in: [rinkeby_Bytes!]
  message_contains: rinkeby_Bytes
  message_not_contains: rinkeby_Bytes
  transactingAsset: rinkeby_Bytes
  transactingAsset_not: rinkeby_Bytes
  transactingAsset_in: [rinkeby_Bytes!]
  transactingAsset_not_in: [rinkeby_Bytes!]
  transactingAsset_contains: rinkeby_Bytes
  transactingAsset_not_contains: rinkeby_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: rinkeby_Bytes
  bridgedAsset_not: rinkeby_Bytes
  bridgedAsset_in: [rinkeby_Bytes!]
  bridgedAsset_not_in: [rinkeby_Bytes!]
  bridgedAsset_contains: rinkeby_Bytes
  bridgedAsset_not_contains: rinkeby_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: rinkeby_Bytes
  caller_not: rinkeby_Bytes
  caller_in: [rinkeby_Bytes!]
  caller_not_in: [rinkeby_Bytes!]
  caller_contains: rinkeby_Bytes
  caller_not_contains: rinkeby_Bytes
  transactionHash: rinkeby_Bytes
  transactionHash_not: rinkeby_Bytes
  transactionHash_in: [rinkeby_Bytes!]
  transactionHash_not_in: [rinkeby_Bytes!]
  transactionHash_contains: rinkeby_Bytes
  transactionHash_not_contains: rinkeby_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  status
  relayerFee
  message
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type rinkeby_Router {
  id: ID!
  isActive: Boolean!
  owner: rinkeby_Bytes
  recipient: rinkeby_Bytes
  proposedOwner: rinkeby_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: rinkeby_AssetBalance_orderBy, orderDirection: rinkeby_OrderDirection, where: rinkeby_AssetBalance_filter): [rinkeby_AssetBalance!]!
}

input rinkeby_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: rinkeby_Bytes
  owner_not: rinkeby_Bytes
  owner_in: [rinkeby_Bytes!]
  owner_not_in: [rinkeby_Bytes!]
  owner_contains: rinkeby_Bytes
  owner_not_contains: rinkeby_Bytes
  recipient: rinkeby_Bytes
  recipient_not: rinkeby_Bytes
  recipient_in: [rinkeby_Bytes!]
  recipient_not_in: [rinkeby_Bytes!]
  recipient_contains: rinkeby_Bytes
  recipient_not_contains: rinkeby_Bytes
  proposedOwner: rinkeby_Bytes
  proposedOwner_not: rinkeby_Bytes
  proposedOwner_in: [rinkeby_Bytes!]
  proposedOwner_not_in: [rinkeby_Bytes!]
  proposedOwner_contains: rinkeby_Bytes
  proposedOwner_not_contains: rinkeby_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: rinkeby_BlockChangedFilter
}

enum rinkeby_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

enum rinkeby_TransferStatus {
  XCalled
  Executed
  Reconciled
  Completed
}

type rinkeby__Block_ {
  """The hash of the block"""
  hash: rinkeby_Bytes

  """The block number"""
  number: Int!
}

"""The type for the top-level _meta field"""
type rinkeby__Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: rinkeby__Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}