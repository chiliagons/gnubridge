/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IDiamondCutInterface extends ethers.utils.Interface {
  functions: {
    "approveEmergencyDiamondCutAsSecurityCouncilMember(bytes32)": FunctionFragment;
    "cancelDiamondCutProposal()": FunctionFragment;
    "emergencyFreezeDiamond()": FunctionFragment;
    "executeDiamondCutProposal((tuple[],address,bytes))": FunctionFragment;
    "proposeDiamondCut(tuple[],address)": FunctionFragment;
    "unfreezeDiamond()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveEmergencyDiamondCutAsSecurityCouncilMember",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDiamondCutProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyFreezeDiamond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeDiamondCutProposal",
    values: [
      {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeDiamondCut",
    values: [
      {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeDiamond",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "approveEmergencyDiamondCutAsSecurityCouncilMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelDiamondCutProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyFreezeDiamond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDiamondCutProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeDiamondCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeDiamond",
    data: BytesLike
  ): Result;

  events: {
    "DiamondCutProposal(tuple[],address)": EventFragment;
    "DiamondCutProposalCancelation()": EventFragment;
    "DiamondCutProposalExecution(tuple)": EventFragment;
    "EmergencyDiamondCutApproved(address)": EventFragment;
    "EmergencyFreeze()": EventFragment;
    "Unfreeze()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiamondCutProposal"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DiamondCutProposalCancelation"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DiamondCutProposalExecution"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EmergencyDiamondCutApproved"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyFreeze"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unfreeze"): EventFragment;
}

export type DiamondCutProposalEvent = TypedEvent<
  [
    ([string, number, boolean, string[]] & {
      facet: string;
      action: number;
      isFreezable: boolean;
      selectors: string[];
    })[],
    string
  ] & {
    _facetCuts: ([string, number, boolean, string[]] & {
      facet: string;
      action: number;
      isFreezable: boolean;
      selectors: string[];
    })[];
    _initAddress: string;
  }
>;

export type DiamondCutProposalCancelationEvent = TypedEvent<[] & {}>;

export type DiamondCutProposalExecutionEvent = TypedEvent<
  [
    [
      ([string, number, boolean, string[]] & {
        facet: string;
        action: number;
        isFreezable: boolean;
        selectors: string[];
      })[],
      string,
      string
    ] & {
      facetCuts: ([string, number, boolean, string[]] & {
        facet: string;
        action: number;
        isFreezable: boolean;
        selectors: string[];
      })[];
      initAddress: string;
      initCalldata: string;
    }
  ] & {
    _diamondCut: [
      ([string, number, boolean, string[]] & {
        facet: string;
        action: number;
        isFreezable: boolean;
        selectors: string[];
      })[],
      string,
      string
    ] & {
      facetCuts: ([string, number, boolean, string[]] & {
        facet: string;
        action: number;
        isFreezable: boolean;
        selectors: string[];
      })[];
      initAddress: string;
      initCalldata: string;
    };
  }
>;

export type EmergencyDiamondCutApprovedEvent = TypedEvent<
  [string] & { _address: string }
>;

export type EmergencyFreezeEvent = TypedEvent<[] & {}>;

export type UnfreezeEvent = TypedEvent<[] & {}>;

export class IDiamondCut extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IDiamondCutInterface;

  functions: {
    approveEmergencyDiamondCutAsSecurityCouncilMember(
      _diamondCutHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelDiamondCutProposal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyFreezeDiamond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeDiamondCutProposal(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeDiamondCut(
      _facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[],
      _initAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unfreezeDiamond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approveEmergencyDiamondCutAsSecurityCouncilMember(
    _diamondCutHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelDiamondCutProposal(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyFreezeDiamond(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeDiamondCutProposal(
    _diamondCut: {
      facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[];
      initAddress: string;
      initCalldata: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeDiamondCut(
    _facetCuts: {
      facet: string;
      action: BigNumberish;
      isFreezable: boolean;
      selectors: BytesLike[];
    }[],
    _initAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unfreezeDiamond(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveEmergencyDiamondCutAsSecurityCouncilMember(
      _diamondCutHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelDiamondCutProposal(overrides?: CallOverrides): Promise<void>;

    emergencyFreezeDiamond(overrides?: CallOverrides): Promise<void>;

    executeDiamondCutProposal(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    proposeDiamondCut(
      _facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[],
      _initAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unfreezeDiamond(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DiamondCutProposal(tuple[],address)"(
      _facetCuts?: null,
      _initAddress?: null
    ): TypedEventFilter<
      [
        ([string, number, boolean, string[]] & {
          facet: string;
          action: number;
          isFreezable: boolean;
          selectors: string[];
        })[],
        string
      ],
      {
        _facetCuts: ([string, number, boolean, string[]] & {
          facet: string;
          action: number;
          isFreezable: boolean;
          selectors: string[];
        })[];
        _initAddress: string;
      }
    >;

    DiamondCutProposal(
      _facetCuts?: null,
      _initAddress?: null
    ): TypedEventFilter<
      [
        ([string, number, boolean, string[]] & {
          facet: string;
          action: number;
          isFreezable: boolean;
          selectors: string[];
        })[],
        string
      ],
      {
        _facetCuts: ([string, number, boolean, string[]] & {
          facet: string;
          action: number;
          isFreezable: boolean;
          selectors: string[];
        })[];
        _initAddress: string;
      }
    >;

    "DiamondCutProposalCancelation()"(): TypedEventFilter<[], {}>;

    DiamondCutProposalCancelation(): TypedEventFilter<[], {}>;

    "DiamondCutProposalExecution(tuple)"(
      _diamondCut?: null
    ): TypedEventFilter<
      [
        [
          ([string, number, boolean, string[]] & {
            facet: string;
            action: number;
            isFreezable: boolean;
            selectors: string[];
          })[],
          string,
          string
        ] & {
          facetCuts: ([string, number, boolean, string[]] & {
            facet: string;
            action: number;
            isFreezable: boolean;
            selectors: string[];
          })[];
          initAddress: string;
          initCalldata: string;
        }
      ],
      {
        _diamondCut: [
          ([string, number, boolean, string[]] & {
            facet: string;
            action: number;
            isFreezable: boolean;
            selectors: string[];
          })[],
          string,
          string
        ] & {
          facetCuts: ([string, number, boolean, string[]] & {
            facet: string;
            action: number;
            isFreezable: boolean;
            selectors: string[];
          })[];
          initAddress: string;
          initCalldata: string;
        };
      }
    >;

    DiamondCutProposalExecution(
      _diamondCut?: null
    ): TypedEventFilter<
      [
        [
          ([string, number, boolean, string[]] & {
            facet: string;
            action: number;
            isFreezable: boolean;
            selectors: string[];
          })[],
          string,
          string
        ] & {
          facetCuts: ([string, number, boolean, string[]] & {
            facet: string;
            action: number;
            isFreezable: boolean;
            selectors: string[];
          })[];
          initAddress: string;
          initCalldata: string;
        }
      ],
      {
        _diamondCut: [
          ([string, number, boolean, string[]] & {
            facet: string;
            action: number;
            isFreezable: boolean;
            selectors: string[];
          })[],
          string,
          string
        ] & {
          facetCuts: ([string, number, boolean, string[]] & {
            facet: string;
            action: number;
            isFreezable: boolean;
            selectors: string[];
          })[];
          initAddress: string;
          initCalldata: string;
        };
      }
    >;

    "EmergencyDiamondCutApproved(address)"(
      _address?: null
    ): TypedEventFilter<[string], { _address: string }>;

    EmergencyDiamondCutApproved(
      _address?: null
    ): TypedEventFilter<[string], { _address: string }>;

    "EmergencyFreeze()"(): TypedEventFilter<[], {}>;

    EmergencyFreeze(): TypedEventFilter<[], {}>;

    "Unfreeze()"(): TypedEventFilter<[], {}>;

    Unfreeze(): TypedEventFilter<[], {}>;
  };

  estimateGas: {
    approveEmergencyDiamondCutAsSecurityCouncilMember(
      _diamondCutHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelDiamondCutProposal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyFreezeDiamond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeDiamondCutProposal(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeDiamondCut(
      _facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[],
      _initAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unfreezeDiamond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveEmergencyDiamondCutAsSecurityCouncilMember(
      _diamondCutHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelDiamondCutProposal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyFreezeDiamond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeDiamondCutProposal(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeDiamondCut(
      _facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[],
      _initAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unfreezeDiamond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
