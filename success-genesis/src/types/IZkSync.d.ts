/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IZkSyncInterface extends ethers.utils.Interface {
  functions: {
    "activatePriorityMode(uint32)": FunctionFragment;
    "addCustomToken(address,string,string,uint8,uint8,uint8)": FunctionFragment;
    "addToken(address,uint8,uint8)": FunctionFragment;
    "addTokenBaseCost(uint256,uint8,uint8)": FunctionFragment;
    "approveEmergencyDiamondCutAsSecurityCouncilMember(bytes32)": FunctionFragment;
    "cancelDiamondCutProposal()": FunctionFragment;
    "changeGovernor(address)": FunctionFragment;
    "commitBlocks((uint32,uint16,uint16,uint224,bytes32,bytes32,uint256,bytes32,bytes32,bytes32),tuple[])": FunctionFragment;
    "deployContractBaseCost(uint256,uint256,uint32,uint32,uint8,uint8)": FunctionFragment;
    "depositBaseCost(uint256,uint8,uint8)": FunctionFragment;
    "depositERC20(address,uint256,address,uint8,uint8)": FunctionFragment;
    "depositETH(uint256,address,uint8,uint8)": FunctionFragment;
    "emergencyFreezeDiamond()": FunctionFragment;
    "executeBaseCost(uint256,uint256,uint32,uint8,uint8)": FunctionFragment;
    "executeBlocks(tuple[])": FunctionFragment;
    "executeDiamondCutProposal((tuple[],address,bytes))": FunctionFragment;
    "getGovernor()": FunctionFragment;
    "getPendingBalance(address,address)": FunctionFragment;
    "getTotalBlocksCommitted()": FunctionFragment;
    "getTotalBlocksExecuted()": FunctionFragment;
    "getTotalBlocksVerified()": FunctionFragment;
    "getTotalPriorityRequests()": FunctionFragment;
    "getVerifier()": FunctionFragment;
    "isValidator(address)": FunctionFragment;
    "movePriorityOpsFromBufferToMainQueue(uint256,uint8)": FunctionFragment;
    "placeBidForBlocksProcessingAuction(uint112,uint8)": FunctionFragment;
    "proposeDiamondCut(tuple[],address)": FunctionFragment;
    "proveBlocks(tuple[],(uint256[],uint256[],uint256[],uint8[],uint256[16]))": FunctionFragment;
    "requestDeployContract(bytes,bytes,uint256,uint8,uint8)": FunctionFragment;
    "requestExecute(address,bytes,uint256,uint8,uint8)": FunctionFragment;
    "requestWithdraw(address,uint256,address,uint8,uint8)": FunctionFragment;
    "revertBlocks(uint32)": FunctionFragment;
    "setValidator(address,bool)": FunctionFragment;
    "unfreezeDiamond()": FunctionFragment;
    "updatePriorityModeSubEpoch()": FunctionFragment;
    "withdrawBaseCost(uint256,uint8,uint8)": FunctionFragment;
    "withdrawPendingBalance(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activatePriorityMode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addCustomToken",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenBaseCost",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveEmergencyDiamondCutAsSecurityCouncilMember",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDiamondCutProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeGovernor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "commitBlocks",
    values: [
      {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      },
      {
        newStateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        blockNumber: BigNumberish;
        feeAccount: string;
        timestamp: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        deployedContracts: BytesLike;
        storageUpdateLogs: BytesLike;
        zkPorterData: {
          round: BigNumberish;
          sigs: { pubkey: BytesLike; signature: BytesLike }[];
          stake: BigNumberish;
        };
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployContractBaseCost",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositBaseCost",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyFreezeDiamond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeBaseCost",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBlocks",
    values: [
      {
        storedBlock: {
          blockNumber: BigNumberish;
          numberOfLayer1Txs: BigNumberish;
          numberOfLayer2Txs: BigNumberish;
          priorityOperationsComplexity: BigNumberish;
          processableOnchainOperationsHash: BytesLike;
          priorityOperationsHash: BytesLike;
          timestamp: BigNumberish;
          stateRoot: BytesLike;
          zkPorterRoot: BytesLike;
          commitment: BytesLike;
        };
        processableOnchainOperations: BytesLike;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeDiamondCutProposal",
    values: [
      {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksCommitted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBlocksVerified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPriorityRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isValidator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "movePriorityOpsFromBufferToMainQueue",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeBidForBlocksProcessingAuction",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeDiamondCut",
    values: [
      {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveBlocks",
    values: [
      {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      }[],
      {
        recursiveInput: BigNumberish[];
        proof: BigNumberish[];
        commitments: BigNumberish[];
        vkIndexes: BigNumberish[];
        subproofsLimbs: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestDeployContract",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestExecute",
    values: [string, BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdraw",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revertBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidator",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeDiamond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriorityModeSubEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBaseCost",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPendingBalance",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "activatePriorityMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCustomToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTokenBaseCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveEmergencyDiamondCutAsSecurityCouncilMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelDiamondCutProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployContractBaseCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositBaseCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyFreezeDiamond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBaseCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeDiamondCutProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksCommitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBlocksVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPriorityRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "movePriorityOpsFromBufferToMainQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeBidForBlocksProcessingAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeDiamondCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestDeployContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeDiamond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriorityModeSubEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBaseCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPendingBalance",
    data: BytesLike
  ): Result;

  events: {
    "BlockCommit(uint32)": EventFragment;
    "BlockExecution(uint32)": EventFragment;
    "BlocksRevert(uint32,uint32)": EventFragment;
    "DiamondCutProposal(tuple[],address)": EventFragment;
    "DiamondCutProposalCancelation()": EventFragment;
    "DiamondCutProposalExecution(tuple)": EventFragment;
    "EmergencyDiamondCutApproved(address)": EventFragment;
    "EmergencyFreeze()": EventFragment;
    "MovePriorityOperationsFromBufferToHeap(uint32,uint64[],uint8)": EventFragment;
    "NewGovernor(address)": EventFragment;
    "NewPriorityModeAuctionBid(uint8,address,uint96,uint256)": EventFragment;
    "NewPriorityModeSubEpoch(uint8,uint128)": EventFragment;
    "NewPriorityRequest(uint64,bytes)": EventFragment;
    "PriorityModeActivated()": EventFragment;
    "Unfreeze()": EventFragment;
    "ValidatorStatusUpdate(address,bool)": EventFragment;
    "WithdrawPendingBalance(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlockCommit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlockExecution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlocksRevert"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiamondCutProposal"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DiamondCutProposalCancelation"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DiamondCutProposalExecution"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "EmergencyDiamondCutApproved"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyFreeze"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MovePriorityOperationsFromBufferToHeap"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGovernor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriorityModeAuctionBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriorityModeSubEpoch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriorityRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriorityModeActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unfreeze"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorStatusUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawPendingBalance"): EventFragment;
}

export type BlockCommitEvent = TypedEvent<[number] & { blockNumber: number }>;

export type BlockExecutionEvent = TypedEvent<
  [number] & { blockNumber: number }
>;

export type BlocksRevertEvent = TypedEvent<
  [number, number] & {
    totalBlocksVerified: number;
    totalBlocksCommitted: number;
  }
>;

export type DiamondCutProposalEvent = TypedEvent<
  [
    ([string, number, boolean, string[]] & {
      facet: string;
      action: number;
      isFreezable: boolean;
      selectors: string[];
    })[],
    string
  ] & {
    _facetCuts: ([string, number, boolean, string[]] & {
      facet: string;
      action: number;
      isFreezable: boolean;
      selectors: string[];
    })[];
    _initAddress: string;
  }
>;

export type DiamondCutProposalCancelationEvent = TypedEvent<[] & {}>;

export type DiamondCutProposalExecutionEvent = TypedEvent<
  [
    [
      ([string, number, boolean, string[]] & {
        facet: string;
        action: number;
        isFreezable: boolean;
        selectors: string[];
      })[],
      string,
      string
    ] & {
      facetCuts: ([string, number, boolean, string[]] & {
        facet: string;
        action: number;
        isFreezable: boolean;
        selectors: string[];
      })[];
      initAddress: string;
      initCalldata: string;
    }
  ] & {
    _diamondCut: [
      ([string, number, boolean, string[]] & {
        facet: string;
        action: number;
        isFreezable: boolean;
        selectors: string[];
      })[],
      string,
      string
    ] & {
      facetCuts: ([string, number, boolean, string[]] & {
        facet: string;
        action: number;
        isFreezable: boolean;
        selectors: string[];
      })[];
      initAddress: string;
      initCalldata: string;
    };
  }
>;

export type EmergencyDiamondCutApprovedEvent = TypedEvent<
  [string] & { _address: string }
>;

export type EmergencyFreezeEvent = TypedEvent<[] & {}>;

export type MovePriorityOperationsFromBufferToHeapEvent = TypedEvent<
  [number, BigNumber[], number] & {
    expirationBlock: number;
    operationIDs: BigNumber[];
    opTree: number;
  }
>;

export type NewGovernorEvent = TypedEvent<[string] & { newGovernor: string }>;

export type NewPriorityModeAuctionBidEvent = TypedEvent<
  [number, string, BigNumber, BigNumber] & {
    opTree: number;
    sender: string;
    bidAmount: BigNumber;
    complexity: BigNumber;
  }
>;

export type NewPriorityModeSubEpochEvent = TypedEvent<
  [number, BigNumber] & { subEpoch: number; subEpochEndTimestamp: BigNumber }
>;

export type NewPriorityRequestEvent = TypedEvent<
  [BigNumber, string] & { serialId: BigNumber; opMetadata: string }
>;

export type PriorityModeActivatedEvent = TypedEvent<[] & {}>;

export type UnfreezeEvent = TypedEvent<[] & {}>;

export type ValidatorStatusUpdateEvent = TypedEvent<
  [string, boolean] & { validatorAddress: string; isActive: boolean }
>;

export type WithdrawPendingBalanceEvent = TypedEvent<
  [string, BigNumber] & { zkSyncTokenAddress: string; amount: BigNumber }
>;

export class IZkSync extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IZkSyncInterface;

  functions: {
    activatePriorityMode(
      _ethExpirationBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addCustomToken(
      _token: string,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToken(
      _token: string,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTokenBaseCost(
      _gasPrice: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approveEmergencyDiamondCutAsSecurityCouncilMember(
      _diamondCutHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelDiamondCutProposal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeGovernor(
      _newGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitBlocks(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      },
      _newBlocksData: {
        newStateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        blockNumber: BigNumberish;
        feeAccount: string;
        timestamp: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        deployedContracts: BytesLike;
        storageUpdateLogs: BytesLike;
        zkPorterData: {
          round: BigNumberish;
          sigs: { pubkey: BytesLike; signature: BytesLike }[];
          stake: BigNumberish;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployContractBaseCost(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _bytecodeLength: BigNumberish,
      _calldataLength: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositBaseCost(
      _gasPrice: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositERC20(
      _token: string,
      _amount: BigNumberish,
      _zkSyncAddress: string,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositETH(
      _amount: BigNumberish,
      _zkSyncAddress: string,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyFreezeDiamond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeBaseCost(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _calldataLength: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    executeBlocks(
      _blocksData: {
        storedBlock: {
          blockNumber: BigNumberish;
          numberOfLayer1Txs: BigNumberish;
          numberOfLayer2Txs: BigNumberish;
          priorityOperationsComplexity: BigNumberish;
          processableOnchainOperationsHash: BytesLike;
          priorityOperationsHash: BytesLike;
          timestamp: BigNumberish;
          stateRoot: BytesLike;
          zkPorterRoot: BytesLike;
          commitment: BytesLike;
        };
        processableOnchainOperations: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeDiamondCutProposal(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getGovernor(overrides?: CallOverrides): Promise<[string]>;

    getPendingBalance(
      _address: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalBlocksCommitted(overrides?: CallOverrides): Promise<[number]>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<[number]>;

    getTotalBlocksVerified(overrides?: CallOverrides): Promise<[number]>;

    getTotalPriorityRequests(overrides?: CallOverrides): Promise<[BigNumber]>;

    getVerifier(overrides?: CallOverrides): Promise<[string]>;

    isValidator(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    movePriorityOpsFromBufferToMainQueue(
      _nOpsToMove: BigNumberish,
      _opTree: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    placeBidForBlocksProcessingAuction(
      _complexityRoot: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposeDiamondCut(
      _facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[],
      _initAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proveBlocks(
      _committedBlocks: {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveInput: BigNumberish[];
        proof: BigNumberish[];
        commitments: BigNumberish[];
        vkIndexes: BigNumberish[];
        subproofsLimbs: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestDeployContract(
      _bytecode: BytesLike,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestExecute(
      _contractAddressL2: string,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestWithdraw(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revertBlocks(
      _blocksToRevert: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setValidator(
      _validator: string,
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unfreezeDiamond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePriorityModeSubEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawBaseCost(
      _gasPrice: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawPendingBalance(
      _owner: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activatePriorityMode(
    _ethExpirationBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addCustomToken(
    _token: string,
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    _queueType: BigNumberish,
    _opTree: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToken(
    _token: string,
    _queueType: BigNumberish,
    _opTree: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTokenBaseCost(
    _gasPrice: BigNumberish,
    _queueType: BigNumberish,
    _opTree: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approveEmergencyDiamondCutAsSecurityCouncilMember(
    _diamondCutHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelDiamondCutProposal(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeGovernor(
    _newGovernor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitBlocks(
    _lastCommittedBlockData: {
      blockNumber: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      numberOfLayer2Txs: BigNumberish;
      priorityOperationsComplexity: BigNumberish;
      processableOnchainOperationsHash: BytesLike;
      priorityOperationsHash: BytesLike;
      timestamp: BigNumberish;
      stateRoot: BytesLike;
      zkPorterRoot: BytesLike;
      commitment: BytesLike;
    },
    _newBlocksData: {
      newStateRoot: BytesLike;
      zkPorterRoot: BytesLike;
      blockNumber: BigNumberish;
      feeAccount: string;
      timestamp: BigNumberish;
      priorityOperationsComplexity: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      numberOfLayer2Txs: BigNumberish;
      processableOnchainOperationsHash: BytesLike;
      priorityOperationsHash: BytesLike;
      deployedContracts: BytesLike;
      storageUpdateLogs: BytesLike;
      zkPorterData: {
        round: BigNumberish;
        sigs: { pubkey: BytesLike; signature: BytesLike }[];
        stake: BigNumberish;
      };
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployContractBaseCost(
    _gasPrice: BigNumberish,
    _ergsLimit: BigNumberish,
    _bytecodeLength: BigNumberish,
    _calldataLength: BigNumberish,
    _queueType: BigNumberish,
    _opTree: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositBaseCost(
    _gasPrice: BigNumberish,
    _queueType: BigNumberish,
    _opTree: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositERC20(
    _token: string,
    _amount: BigNumberish,
    _zkSyncAddress: string,
    _queueType: BigNumberish,
    _opTree: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositETH(
    _amount: BigNumberish,
    _zkSyncAddress: string,
    _queueType: BigNumberish,
    _opTree: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyFreezeDiamond(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeBaseCost(
    _gasPrice: BigNumberish,
    _ergsLimit: BigNumberish,
    _calldataLength: BigNumberish,
    _queueType: BigNumberish,
    _opTree: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  executeBlocks(
    _blocksData: {
      storedBlock: {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      };
      processableOnchainOperations: BytesLike;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeDiamondCutProposal(
    _diamondCut: {
      facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[];
      initAddress: string;
      initCalldata: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getGovernor(overrides?: CallOverrides): Promise<string>;

  getPendingBalance(
    _address: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalBlocksCommitted(overrides?: CallOverrides): Promise<number>;

  getTotalBlocksExecuted(overrides?: CallOverrides): Promise<number>;

  getTotalBlocksVerified(overrides?: CallOverrides): Promise<number>;

  getTotalPriorityRequests(overrides?: CallOverrides): Promise<BigNumber>;

  getVerifier(overrides?: CallOverrides): Promise<string>;

  isValidator(_address: string, overrides?: CallOverrides): Promise<boolean>;

  movePriorityOpsFromBufferToMainQueue(
    _nOpsToMove: BigNumberish,
    _opTree: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  placeBidForBlocksProcessingAuction(
    _complexityRoot: BigNumberish,
    _opTree: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposeDiamondCut(
    _facetCuts: {
      facet: string;
      action: BigNumberish;
      isFreezable: boolean;
      selectors: BytesLike[];
    }[],
    _initAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proveBlocks(
    _committedBlocks: {
      blockNumber: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      numberOfLayer2Txs: BigNumberish;
      priorityOperationsComplexity: BigNumberish;
      processableOnchainOperationsHash: BytesLike;
      priorityOperationsHash: BytesLike;
      timestamp: BigNumberish;
      stateRoot: BytesLike;
      zkPorterRoot: BytesLike;
      commitment: BytesLike;
    }[],
    _proof: {
      recursiveInput: BigNumberish[];
      proof: BigNumberish[];
      commitments: BigNumberish[];
      vkIndexes: BigNumberish[];
      subproofsLimbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestDeployContract(
    _bytecode: BytesLike,
    _calldata: BytesLike,
    _ergsLimit: BigNumberish,
    _queueType: BigNumberish,
    _opTree: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestExecute(
    _contractAddressL2: string,
    _calldata: BytesLike,
    _ergsLimit: BigNumberish,
    _queueType: BigNumberish,
    _opTree: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestWithdraw(
    _token: string,
    _amount: BigNumberish,
    _to: string,
    _queueType: BigNumberish,
    _opTree: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revertBlocks(
    _blocksToRevert: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setValidator(
    _validator: string,
    _active: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unfreezeDiamond(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePriorityModeSubEpoch(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawBaseCost(
    _gasPrice: BigNumberish,
    _queueType: BigNumberish,
    _opTree: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawPendingBalance(
    _owner: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activatePriorityMode(
      _ethExpirationBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addCustomToken(
      _token: string,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken(
      _token: string,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addTokenBaseCost(
      _gasPrice: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveEmergencyDiamondCutAsSecurityCouncilMember(
      _diamondCutHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelDiamondCutProposal(overrides?: CallOverrides): Promise<void>;

    changeGovernor(
      _newGovernor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    commitBlocks(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      },
      _newBlocksData: {
        newStateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        blockNumber: BigNumberish;
        feeAccount: string;
        timestamp: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        deployedContracts: BytesLike;
        storageUpdateLogs: BytesLike;
        zkPorterData: {
          round: BigNumberish;
          sigs: { pubkey: BytesLike; signature: BytesLike }[];
          stake: BigNumberish;
        };
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    deployContractBaseCost(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _bytecodeLength: BigNumberish,
      _calldataLength: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositBaseCost(
      _gasPrice: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositERC20(
      _token: string,
      _amount: BigNumberish,
      _zkSyncAddress: string,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositETH(
      _amount: BigNumberish,
      _zkSyncAddress: string,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyFreezeDiamond(overrides?: CallOverrides): Promise<void>;

    executeBaseCost(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _calldataLength: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeBlocks(
      _blocksData: {
        storedBlock: {
          blockNumber: BigNumberish;
          numberOfLayer1Txs: BigNumberish;
          numberOfLayer2Txs: BigNumberish;
          priorityOperationsComplexity: BigNumberish;
          processableOnchainOperationsHash: BytesLike;
          priorityOperationsHash: BytesLike;
          timestamp: BigNumberish;
          stateRoot: BytesLike;
          zkPorterRoot: BytesLike;
          commitment: BytesLike;
        };
        processableOnchainOperations: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeDiamondCutProposal(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    getGovernor(overrides?: CallOverrides): Promise<string>;

    getPendingBalance(
      _address: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBlocksCommitted(overrides?: CallOverrides): Promise<number>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<number>;

    getTotalBlocksVerified(overrides?: CallOverrides): Promise<number>;

    getTotalPriorityRequests(overrides?: CallOverrides): Promise<BigNumber>;

    getVerifier(overrides?: CallOverrides): Promise<string>;

    isValidator(_address: string, overrides?: CallOverrides): Promise<boolean>;

    movePriorityOpsFromBufferToMainQueue(
      _nOpsToMove: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    placeBidForBlocksProcessingAuction(
      _complexityRoot: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeDiamondCut(
      _facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[],
      _initAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proveBlocks(
      _committedBlocks: {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveInput: BigNumberish[];
        proof: BigNumberish[];
        commitments: BigNumberish[];
        vkIndexes: BigNumberish[];
        subproofsLimbs: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    requestDeployContract(
      _bytecode: BytesLike,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requestExecute(
      _contractAddressL2: string,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requestWithdraw(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revertBlocks(
      _blocksToRevert: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidator(
      _validator: string,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    unfreezeDiamond(overrides?: CallOverrides): Promise<void>;

    updatePriorityModeSubEpoch(overrides?: CallOverrides): Promise<void>;

    withdrawBaseCost(
      _gasPrice: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawPendingBalance(
      _owner: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BlockCommit(uint32)"(
      blockNumber?: BigNumberish | null
    ): TypedEventFilter<[number], { blockNumber: number }>;

    BlockCommit(
      blockNumber?: BigNumberish | null
    ): TypedEventFilter<[number], { blockNumber: number }>;

    "BlockExecution(uint32)"(
      blockNumber?: BigNumberish | null
    ): TypedEventFilter<[number], { blockNumber: number }>;

    BlockExecution(
      blockNumber?: BigNumberish | null
    ): TypedEventFilter<[number], { blockNumber: number }>;

    "BlocksRevert(uint32,uint32)"(
      totalBlocksVerified?: null,
      totalBlocksCommitted?: null
    ): TypedEventFilter<
      [number, number],
      { totalBlocksVerified: number; totalBlocksCommitted: number }
    >;

    BlocksRevert(
      totalBlocksVerified?: null,
      totalBlocksCommitted?: null
    ): TypedEventFilter<
      [number, number],
      { totalBlocksVerified: number; totalBlocksCommitted: number }
    >;

    "DiamondCutProposal(tuple[],address)"(
      _facetCuts?: null,
      _initAddress?: null
    ): TypedEventFilter<
      [
        ([string, number, boolean, string[]] & {
          facet: string;
          action: number;
          isFreezable: boolean;
          selectors: string[];
        })[],
        string
      ],
      {
        _facetCuts: ([string, number, boolean, string[]] & {
          facet: string;
          action: number;
          isFreezable: boolean;
          selectors: string[];
        })[];
        _initAddress: string;
      }
    >;

    DiamondCutProposal(
      _facetCuts?: null,
      _initAddress?: null
    ): TypedEventFilter<
      [
        ([string, number, boolean, string[]] & {
          facet: string;
          action: number;
          isFreezable: boolean;
          selectors: string[];
        })[],
        string
      ],
      {
        _facetCuts: ([string, number, boolean, string[]] & {
          facet: string;
          action: number;
          isFreezable: boolean;
          selectors: string[];
        })[];
        _initAddress: string;
      }
    >;

    "DiamondCutProposalCancelation()"(): TypedEventFilter<[], {}>;

    DiamondCutProposalCancelation(): TypedEventFilter<[], {}>;

    "DiamondCutProposalExecution(tuple)"(
      _diamondCut?: null
    ): TypedEventFilter<
      [
        [
          ([string, number, boolean, string[]] & {
            facet: string;
            action: number;
            isFreezable: boolean;
            selectors: string[];
          })[],
          string,
          string
        ] & {
          facetCuts: ([string, number, boolean, string[]] & {
            facet: string;
            action: number;
            isFreezable: boolean;
            selectors: string[];
          })[];
          initAddress: string;
          initCalldata: string;
        }
      ],
      {
        _diamondCut: [
          ([string, number, boolean, string[]] & {
            facet: string;
            action: number;
            isFreezable: boolean;
            selectors: string[];
          })[],
          string,
          string
        ] & {
          facetCuts: ([string, number, boolean, string[]] & {
            facet: string;
            action: number;
            isFreezable: boolean;
            selectors: string[];
          })[];
          initAddress: string;
          initCalldata: string;
        };
      }
    >;

    DiamondCutProposalExecution(
      _diamondCut?: null
    ): TypedEventFilter<
      [
        [
          ([string, number, boolean, string[]] & {
            facet: string;
            action: number;
            isFreezable: boolean;
            selectors: string[];
          })[],
          string,
          string
        ] & {
          facetCuts: ([string, number, boolean, string[]] & {
            facet: string;
            action: number;
            isFreezable: boolean;
            selectors: string[];
          })[];
          initAddress: string;
          initCalldata: string;
        }
      ],
      {
        _diamondCut: [
          ([string, number, boolean, string[]] & {
            facet: string;
            action: number;
            isFreezable: boolean;
            selectors: string[];
          })[],
          string,
          string
        ] & {
          facetCuts: ([string, number, boolean, string[]] & {
            facet: string;
            action: number;
            isFreezable: boolean;
            selectors: string[];
          })[];
          initAddress: string;
          initCalldata: string;
        };
      }
    >;

    "EmergencyDiamondCutApproved(address)"(
      _address?: null
    ): TypedEventFilter<[string], { _address: string }>;

    EmergencyDiamondCutApproved(
      _address?: null
    ): TypedEventFilter<[string], { _address: string }>;

    "EmergencyFreeze()"(): TypedEventFilter<[], {}>;

    EmergencyFreeze(): TypedEventFilter<[], {}>;

    "MovePriorityOperationsFromBufferToHeap(uint32,uint64[],uint8)"(
      expirationBlock?: null,
      operationIDs?: null,
      opTree?: null
    ): TypedEventFilter<
      [number, BigNumber[], number],
      { expirationBlock: number; operationIDs: BigNumber[]; opTree: number }
    >;

    MovePriorityOperationsFromBufferToHeap(
      expirationBlock?: null,
      operationIDs?: null,
      opTree?: null
    ): TypedEventFilter<
      [number, BigNumber[], number],
      { expirationBlock: number; operationIDs: BigNumber[]; opTree: number }
    >;

    "NewGovernor(address)"(
      newGovernor?: null
    ): TypedEventFilter<[string], { newGovernor: string }>;

    NewGovernor(
      newGovernor?: null
    ): TypedEventFilter<[string], { newGovernor: string }>;

    "NewPriorityModeAuctionBid(uint8,address,uint96,uint256)"(
      opTree?: null,
      sender?: null,
      bidAmount?: null,
      complexity?: null
    ): TypedEventFilter<
      [number, string, BigNumber, BigNumber],
      {
        opTree: number;
        sender: string;
        bidAmount: BigNumber;
        complexity: BigNumber;
      }
    >;

    NewPriorityModeAuctionBid(
      opTree?: null,
      sender?: null,
      bidAmount?: null,
      complexity?: null
    ): TypedEventFilter<
      [number, string, BigNumber, BigNumber],
      {
        opTree: number;
        sender: string;
        bidAmount: BigNumber;
        complexity: BigNumber;
      }
    >;

    "NewPriorityModeSubEpoch(uint8,uint128)"(
      subEpoch?: null,
      subEpochEndTimestamp?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { subEpoch: number; subEpochEndTimestamp: BigNumber }
    >;

    NewPriorityModeSubEpoch(
      subEpoch?: null,
      subEpochEndTimestamp?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { subEpoch: number; subEpochEndTimestamp: BigNumber }
    >;

    "NewPriorityRequest(uint64,bytes)"(
      serialId?: null,
      opMetadata?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { serialId: BigNumber; opMetadata: string }
    >;

    NewPriorityRequest(
      serialId?: null,
      opMetadata?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { serialId: BigNumber; opMetadata: string }
    >;

    "PriorityModeActivated()"(): TypedEventFilter<[], {}>;

    PriorityModeActivated(): TypedEventFilter<[], {}>;

    "Unfreeze()"(): TypedEventFilter<[], {}>;

    Unfreeze(): TypedEventFilter<[], {}>;

    "ValidatorStatusUpdate(address,bool)"(
      validatorAddress?: string | null,
      isActive?: null
    ): TypedEventFilter<
      [string, boolean],
      { validatorAddress: string; isActive: boolean }
    >;

    ValidatorStatusUpdate(
      validatorAddress?: string | null,
      isActive?: null
    ): TypedEventFilter<
      [string, boolean],
      { validatorAddress: string; isActive: boolean }
    >;

    "WithdrawPendingBalance(address,uint256)"(
      zkSyncTokenAddress?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { zkSyncTokenAddress: string; amount: BigNumber }
    >;

    WithdrawPendingBalance(
      zkSyncTokenAddress?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { zkSyncTokenAddress: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    activatePriorityMode(
      _ethExpirationBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addCustomToken(
      _token: string,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToken(
      _token: string,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTokenBaseCost(
      _gasPrice: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveEmergencyDiamondCutAsSecurityCouncilMember(
      _diamondCutHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelDiamondCutProposal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeGovernor(
      _newGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitBlocks(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      },
      _newBlocksData: {
        newStateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        blockNumber: BigNumberish;
        feeAccount: string;
        timestamp: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        deployedContracts: BytesLike;
        storageUpdateLogs: BytesLike;
        zkPorterData: {
          round: BigNumberish;
          sigs: { pubkey: BytesLike; signature: BytesLike }[];
          stake: BigNumberish;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployContractBaseCost(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _bytecodeLength: BigNumberish,
      _calldataLength: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositBaseCost(
      _gasPrice: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositERC20(
      _token: string,
      _amount: BigNumberish,
      _zkSyncAddress: string,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositETH(
      _amount: BigNumberish,
      _zkSyncAddress: string,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyFreezeDiamond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeBaseCost(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _calldataLength: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeBlocks(
      _blocksData: {
        storedBlock: {
          blockNumber: BigNumberish;
          numberOfLayer1Txs: BigNumberish;
          numberOfLayer2Txs: BigNumberish;
          priorityOperationsComplexity: BigNumberish;
          processableOnchainOperationsHash: BytesLike;
          priorityOperationsHash: BytesLike;
          timestamp: BigNumberish;
          stateRoot: BytesLike;
          zkPorterRoot: BytesLike;
          commitment: BytesLike;
        };
        processableOnchainOperations: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeDiamondCutProposal(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingBalance(
      _address: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBlocksCommitted(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBlocksVerified(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPriorityRequests(overrides?: CallOverrides): Promise<BigNumber>;

    getVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    isValidator(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    movePriorityOpsFromBufferToMainQueue(
      _nOpsToMove: BigNumberish,
      _opTree: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    placeBidForBlocksProcessingAuction(
      _complexityRoot: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposeDiamondCut(
      _facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[],
      _initAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proveBlocks(
      _committedBlocks: {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveInput: BigNumberish[];
        proof: BigNumberish[];
        commitments: BigNumberish[];
        vkIndexes: BigNumberish[];
        subproofsLimbs: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestDeployContract(
      _bytecode: BytesLike,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestExecute(
      _contractAddressL2: string,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestWithdraw(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revertBlocks(
      _blocksToRevert: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setValidator(
      _validator: string,
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unfreezeDiamond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePriorityModeSubEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawBaseCost(
      _gasPrice: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawPendingBalance(
      _owner: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activatePriorityMode(
      _ethExpirationBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addCustomToken(
      _token: string,
      _name: string,
      _symbol: string,
      _decimals: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToken(
      _token: string,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTokenBaseCost(
      _gasPrice: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveEmergencyDiamondCutAsSecurityCouncilMember(
      _diamondCutHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelDiamondCutProposal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeGovernor(
      _newGovernor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitBlocks(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      },
      _newBlocksData: {
        newStateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        blockNumber: BigNumberish;
        feeAccount: string;
        timestamp: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        deployedContracts: BytesLike;
        storageUpdateLogs: BytesLike;
        zkPorterData: {
          round: BigNumberish;
          sigs: { pubkey: BytesLike; signature: BytesLike }[];
          stake: BigNumberish;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployContractBaseCost(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _bytecodeLength: BigNumberish,
      _calldataLength: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositBaseCost(
      _gasPrice: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositERC20(
      _token: string,
      _amount: BigNumberish,
      _zkSyncAddress: string,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositETH(
      _amount: BigNumberish,
      _zkSyncAddress: string,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyFreezeDiamond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeBaseCost(
      _gasPrice: BigNumberish,
      _ergsLimit: BigNumberish,
      _calldataLength: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeBlocks(
      _blocksData: {
        storedBlock: {
          blockNumber: BigNumberish;
          numberOfLayer1Txs: BigNumberish;
          numberOfLayer2Txs: BigNumberish;
          priorityOperationsComplexity: BigNumberish;
          processableOnchainOperationsHash: BytesLike;
          priorityOperationsHash: BytesLike;
          timestamp: BigNumberish;
          stateRoot: BytesLike;
          zkPorterRoot: BytesLike;
          commitment: BytesLike;
        };
        processableOnchainOperations: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeDiamondCutProposal(
      _diamondCut: {
        facetCuts: {
          facet: string;
          action: BigNumberish;
          isFreezable: boolean;
          selectors: BytesLike[];
        }[];
        initAddress: string;
        initCalldata: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingBalance(
      _address: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBlocksCommitted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBlocksExecuted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBlocksVerified(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPriorityRequests(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidator(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    movePriorityOpsFromBufferToMainQueue(
      _nOpsToMove: BigNumberish,
      _opTree: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    placeBidForBlocksProcessingAuction(
      _complexityRoot: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeDiamondCut(
      _facetCuts: {
        facet: string;
        action: BigNumberish;
        isFreezable: boolean;
        selectors: BytesLike[];
      }[],
      _initAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proveBlocks(
      _committedBlocks: {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveInput: BigNumberish[];
        proof: BigNumberish[];
        commitments: BigNumberish[];
        vkIndexes: BigNumberish[];
        subproofsLimbs: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestDeployContract(
      _bytecode: BytesLike,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestExecute(
      _contractAddressL2: string,
      _calldata: BytesLike,
      _ergsLimit: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestWithdraw(
      _token: string,
      _amount: BigNumberish,
      _to: string,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revertBlocks(
      _blocksToRevert: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setValidator(
      _validator: string,
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unfreezeDiamond(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePriorityModeSubEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBaseCost(
      _gasPrice: BigNumberish,
      _queueType: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawPendingBalance(
      _owner: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
