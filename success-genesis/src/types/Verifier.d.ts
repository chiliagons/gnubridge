/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VerifierInterface extends ethers.utils.Interface {
  functions: {
    "verifyAggregatedBlockProof(uint256[],uint256[],uint8[],uint256[],uint256[16])": FunctionFragment;
    "verify_serialized_proof(uint256[],uint256[],(uint256,uint256,(uint256),tuple[7],tuple[2],tuple[4],tuple[3],(uint256[2],uint256[2])))": FunctionFragment;
    "verify_serialized_proof_with_recursion(uint256[],uint256[],uint256,uint8,uint8[],uint256[],uint256[16],(uint256,uint256,(uint256),tuple[7],tuple[2],tuple[4],tuple[3],(uint256[2],uint256[2])))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "verifyAggregatedBlockProof",
    values: [
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verify_serialized_proof",
    values: [
      BigNumberish[],
      BigNumberish[],
      {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verify_serialized_proof_with_recursion",
    values: [
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "verifyAggregatedBlockProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verify_serialized_proof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verify_serialized_proof_with_recursion",
    data: BytesLike
  ): Result;

  events: {};
}

export class Verifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VerifierInterface;

  functions: {
    verifyAggregatedBlockProof(
      _recursiveInput: BigNumberish[],
      _proof: BigNumberish[],
      _vkIndexes: BigNumberish[],
      _individual_vks_inputs: BigNumberish[],
      _subproofs_limbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verify_serialized_proof(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verify_serialized_proof_with_recursion(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      recursive_vks_root: BigNumberish,
      max_valid_index: BigNumberish,
      recursive_vks_indexes: BigNumberish[],
      individual_vks_inputs: BigNumberish[],
      subproofs_limbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  verifyAggregatedBlockProof(
    _recursiveInput: BigNumberish[],
    _proof: BigNumberish[],
    _vkIndexes: BigNumberish[],
    _individual_vks_inputs: BigNumberish[],
    _subproofs_limbs: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: CallOverrides
  ): Promise<boolean>;

  verify_serialized_proof(
    public_inputs: BigNumberish[],
    serialized_proof: BigNumberish[],
    vk: {
      domain_size: BigNumberish;
      num_inputs: BigNumberish;
      omega: { value: BigNumberish };
      gate_setup_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      gate_selector_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      copy_permutation_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      copy_permutation_non_residues: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      g2_x: {
        X: [BigNumberish, BigNumberish];
        Y: [BigNumberish, BigNumberish];
      };
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  verify_serialized_proof_with_recursion(
    public_inputs: BigNumberish[],
    serialized_proof: BigNumberish[],
    recursive_vks_root: BigNumberish,
    max_valid_index: BigNumberish,
    recursive_vks_indexes: BigNumberish[],
    individual_vks_inputs: BigNumberish[],
    subproofs_limbs: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    vk: {
      domain_size: BigNumberish;
      num_inputs: BigNumberish;
      omega: { value: BigNumberish };
      gate_setup_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      gate_selector_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      copy_permutation_commitments: [
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish },
        { X: BigNumberish; Y: BigNumberish }
      ];
      copy_permutation_non_residues: [
        { value: BigNumberish },
        { value: BigNumberish },
        { value: BigNumberish }
      ];
      g2_x: {
        X: [BigNumberish, BigNumberish];
        Y: [BigNumberish, BigNumberish];
      };
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    verifyAggregatedBlockProof(
      _recursiveInput: BigNumberish[],
      _proof: BigNumberish[],
      _vkIndexes: BigNumberish[],
      _individual_vks_inputs: BigNumberish[],
      _subproofs_limbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<boolean>;

    verify_serialized_proof(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    verify_serialized_proof_with_recursion(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      recursive_vks_root: BigNumberish,
      max_valid_index: BigNumberish,
      recursive_vks_indexes: BigNumberish[],
      individual_vks_inputs: BigNumberish[],
      subproofs_limbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    verifyAggregatedBlockProof(
      _recursiveInput: BigNumberish[],
      _proof: BigNumberish[],
      _vkIndexes: BigNumberish[],
      _individual_vks_inputs: BigNumberish[],
      _subproofs_limbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify_serialized_proof(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify_serialized_proof_with_recursion(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      recursive_vks_root: BigNumberish,
      max_valid_index: BigNumberish,
      recursive_vks_indexes: BigNumberish[],
      individual_vks_inputs: BigNumberish[],
      subproofs_limbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    verifyAggregatedBlockProof(
      _recursiveInput: BigNumberish[],
      _proof: BigNumberish[],
      _vkIndexes: BigNumberish[],
      _individual_vks_inputs: BigNumberish[],
      _subproofs_limbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify_serialized_proof(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify_serialized_proof_with_recursion(
      public_inputs: BigNumberish[],
      serialized_proof: BigNumberish[],
      recursive_vks_root: BigNumberish,
      max_valid_index: BigNumberish,
      recursive_vks_indexes: BigNumberish[],
      individual_vks_inputs: BigNumberish[],
      subproofs_limbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      vk: {
        domain_size: BigNumberish;
        num_inputs: BigNumberish;
        omega: { value: BigNumberish };
        gate_setup_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        gate_selector_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_commitments: [
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish },
          { X: BigNumberish; Y: BigNumberish }
        ];
        copy_permutation_non_residues: [
          { value: BigNumberish },
          { value: BigNumberish },
          { value: BigNumberish }
        ];
        g2_x: {
          X: [BigNumberish, BigNumberish];
          Y: [BigNumberish, BigNumberish];
        };
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
