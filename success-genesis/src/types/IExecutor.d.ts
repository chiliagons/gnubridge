/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IExecutorInterface extends ethers.utils.Interface {
  functions: {
    "commitBlocks((uint32,uint16,uint16,uint224,bytes32,bytes32,uint256,bytes32,bytes32,bytes32),tuple[])": FunctionFragment;
    "executeBlocks(tuple[])": FunctionFragment;
    "movePriorityOpsFromBufferToMainQueue(uint256,uint8)": FunctionFragment;
    "proveBlocks(tuple[],(uint256[],uint256[],uint256[],uint8[],uint256[16]))": FunctionFragment;
    "revertBlocks(uint32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "commitBlocks",
    values: [
      {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      },
      {
        newStateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        blockNumber: BigNumberish;
        feeAccount: string;
        timestamp: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        deployedContracts: BytesLike;
        storageUpdateLogs: BytesLike;
        zkPorterData: {
          round: BigNumberish;
          sigs: { pubkey: BytesLike; signature: BytesLike }[];
          stake: BigNumberish;
        };
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBlocks",
    values: [
      {
        storedBlock: {
          blockNumber: BigNumberish;
          numberOfLayer1Txs: BigNumberish;
          numberOfLayer2Txs: BigNumberish;
          priorityOperationsComplexity: BigNumberish;
          processableOnchainOperationsHash: BytesLike;
          priorityOperationsHash: BytesLike;
          timestamp: BigNumberish;
          stateRoot: BytesLike;
          zkPorterRoot: BytesLike;
          commitment: BytesLike;
        };
        processableOnchainOperations: BytesLike;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "movePriorityOpsFromBufferToMainQueue",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proveBlocks",
    values: [
      {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      }[],
      {
        recursiveInput: BigNumberish[];
        proof: BigNumberish[];
        commitments: BigNumberish[];
        vkIndexes: BigNumberish[];
        subproofsLimbs: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revertBlocks",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "commitBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "movePriorityOpsFromBufferToMainQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertBlocks",
    data: BytesLike
  ): Result;

  events: {
    "BlockCommit(uint32)": EventFragment;
    "BlockExecution(uint32)": EventFragment;
    "BlocksRevert(uint32,uint32)": EventFragment;
    "MovePriorityOperationsFromBufferToHeap(uint32,uint64[],uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlockCommit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlockExecution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlocksRevert"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MovePriorityOperationsFromBufferToHeap"
  ): EventFragment;
}

export type BlockCommitEvent = TypedEvent<[number] & { blockNumber: number }>;

export type BlockExecutionEvent = TypedEvent<
  [number] & { blockNumber: number }
>;

export type BlocksRevertEvent = TypedEvent<
  [number, number] & {
    totalBlocksVerified: number;
    totalBlocksCommitted: number;
  }
>;

export type MovePriorityOperationsFromBufferToHeapEvent = TypedEvent<
  [number, BigNumber[], number] & {
    expirationBlock: number;
    operationIDs: BigNumber[];
    opTree: number;
  }
>;

export class IExecutor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IExecutorInterface;

  functions: {
    commitBlocks(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      },
      _newBlocksData: {
        newStateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        blockNumber: BigNumberish;
        feeAccount: string;
        timestamp: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        deployedContracts: BytesLike;
        storageUpdateLogs: BytesLike;
        zkPorterData: {
          round: BigNumberish;
          sigs: { pubkey: BytesLike; signature: BytesLike }[];
          stake: BigNumberish;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeBlocks(
      _blocksData: {
        storedBlock: {
          blockNumber: BigNumberish;
          numberOfLayer1Txs: BigNumberish;
          numberOfLayer2Txs: BigNumberish;
          priorityOperationsComplexity: BigNumberish;
          processableOnchainOperationsHash: BytesLike;
          priorityOperationsHash: BytesLike;
          timestamp: BigNumberish;
          stateRoot: BytesLike;
          zkPorterRoot: BytesLike;
          commitment: BytesLike;
        };
        processableOnchainOperations: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    movePriorityOpsFromBufferToMainQueue(
      _nOpsToMove: BigNumberish,
      _opTree: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proveBlocks(
      _committedBlocks: {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveInput: BigNumberish[];
        proof: BigNumberish[];
        commitments: BigNumberish[];
        vkIndexes: BigNumberish[];
        subproofsLimbs: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revertBlocks(
      _blocksToRevert: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  commitBlocks(
    _lastCommittedBlockData: {
      blockNumber: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      numberOfLayer2Txs: BigNumberish;
      priorityOperationsComplexity: BigNumberish;
      processableOnchainOperationsHash: BytesLike;
      priorityOperationsHash: BytesLike;
      timestamp: BigNumberish;
      stateRoot: BytesLike;
      zkPorterRoot: BytesLike;
      commitment: BytesLike;
    },
    _newBlocksData: {
      newStateRoot: BytesLike;
      zkPorterRoot: BytesLike;
      blockNumber: BigNumberish;
      feeAccount: string;
      timestamp: BigNumberish;
      priorityOperationsComplexity: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      numberOfLayer2Txs: BigNumberish;
      processableOnchainOperationsHash: BytesLike;
      priorityOperationsHash: BytesLike;
      deployedContracts: BytesLike;
      storageUpdateLogs: BytesLike;
      zkPorterData: {
        round: BigNumberish;
        sigs: { pubkey: BytesLike; signature: BytesLike }[];
        stake: BigNumberish;
      };
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeBlocks(
    _blocksData: {
      storedBlock: {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      };
      processableOnchainOperations: BytesLike;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  movePriorityOpsFromBufferToMainQueue(
    _nOpsToMove: BigNumberish,
    _opTree: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proveBlocks(
    _committedBlocks: {
      blockNumber: BigNumberish;
      numberOfLayer1Txs: BigNumberish;
      numberOfLayer2Txs: BigNumberish;
      priorityOperationsComplexity: BigNumberish;
      processableOnchainOperationsHash: BytesLike;
      priorityOperationsHash: BytesLike;
      timestamp: BigNumberish;
      stateRoot: BytesLike;
      zkPorterRoot: BytesLike;
      commitment: BytesLike;
    }[],
    _proof: {
      recursiveInput: BigNumberish[];
      proof: BigNumberish[];
      commitments: BigNumberish[];
      vkIndexes: BigNumberish[];
      subproofsLimbs: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revertBlocks(
    _blocksToRevert: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    commitBlocks(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      },
      _newBlocksData: {
        newStateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        blockNumber: BigNumberish;
        feeAccount: string;
        timestamp: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        deployedContracts: BytesLike;
        storageUpdateLogs: BytesLike;
        zkPorterData: {
          round: BigNumberish;
          sigs: { pubkey: BytesLike; signature: BytesLike }[];
          stake: BigNumberish;
        };
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeBlocks(
      _blocksData: {
        storedBlock: {
          blockNumber: BigNumberish;
          numberOfLayer1Txs: BigNumberish;
          numberOfLayer2Txs: BigNumberish;
          priorityOperationsComplexity: BigNumberish;
          processableOnchainOperationsHash: BytesLike;
          priorityOperationsHash: BytesLike;
          timestamp: BigNumberish;
          stateRoot: BytesLike;
          zkPorterRoot: BytesLike;
          commitment: BytesLike;
        };
        processableOnchainOperations: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    movePriorityOpsFromBufferToMainQueue(
      _nOpsToMove: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proveBlocks(
      _committedBlocks: {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveInput: BigNumberish[];
        proof: BigNumberish[];
        commitments: BigNumberish[];
        vkIndexes: BigNumberish[];
        subproofsLimbs: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    revertBlocks(
      _blocksToRevert: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BlockCommit(uint32)"(
      blockNumber?: BigNumberish | null
    ): TypedEventFilter<[number], { blockNumber: number }>;

    BlockCommit(
      blockNumber?: BigNumberish | null
    ): TypedEventFilter<[number], { blockNumber: number }>;

    "BlockExecution(uint32)"(
      blockNumber?: BigNumberish | null
    ): TypedEventFilter<[number], { blockNumber: number }>;

    BlockExecution(
      blockNumber?: BigNumberish | null
    ): TypedEventFilter<[number], { blockNumber: number }>;

    "BlocksRevert(uint32,uint32)"(
      totalBlocksVerified?: null,
      totalBlocksCommitted?: null
    ): TypedEventFilter<
      [number, number],
      { totalBlocksVerified: number; totalBlocksCommitted: number }
    >;

    BlocksRevert(
      totalBlocksVerified?: null,
      totalBlocksCommitted?: null
    ): TypedEventFilter<
      [number, number],
      { totalBlocksVerified: number; totalBlocksCommitted: number }
    >;

    "MovePriorityOperationsFromBufferToHeap(uint32,uint64[],uint8)"(
      expirationBlock?: null,
      operationIDs?: null,
      opTree?: null
    ): TypedEventFilter<
      [number, BigNumber[], number],
      { expirationBlock: number; operationIDs: BigNumber[]; opTree: number }
    >;

    MovePriorityOperationsFromBufferToHeap(
      expirationBlock?: null,
      operationIDs?: null,
      opTree?: null
    ): TypedEventFilter<
      [number, BigNumber[], number],
      { expirationBlock: number; operationIDs: BigNumber[]; opTree: number }
    >;
  };

  estimateGas: {
    commitBlocks(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      },
      _newBlocksData: {
        newStateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        blockNumber: BigNumberish;
        feeAccount: string;
        timestamp: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        deployedContracts: BytesLike;
        storageUpdateLogs: BytesLike;
        zkPorterData: {
          round: BigNumberish;
          sigs: { pubkey: BytesLike; signature: BytesLike }[];
          stake: BigNumberish;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeBlocks(
      _blocksData: {
        storedBlock: {
          blockNumber: BigNumberish;
          numberOfLayer1Txs: BigNumberish;
          numberOfLayer2Txs: BigNumberish;
          priorityOperationsComplexity: BigNumberish;
          processableOnchainOperationsHash: BytesLike;
          priorityOperationsHash: BytesLike;
          timestamp: BigNumberish;
          stateRoot: BytesLike;
          zkPorterRoot: BytesLike;
          commitment: BytesLike;
        };
        processableOnchainOperations: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    movePriorityOpsFromBufferToMainQueue(
      _nOpsToMove: BigNumberish,
      _opTree: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proveBlocks(
      _committedBlocks: {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveInput: BigNumberish[];
        proof: BigNumberish[];
        commitments: BigNumberish[];
        vkIndexes: BigNumberish[];
        subproofsLimbs: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revertBlocks(
      _blocksToRevert: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    commitBlocks(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      },
      _newBlocksData: {
        newStateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        blockNumber: BigNumberish;
        feeAccount: string;
        timestamp: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        deployedContracts: BytesLike;
        storageUpdateLogs: BytesLike;
        zkPorterData: {
          round: BigNumberish;
          sigs: { pubkey: BytesLike; signature: BytesLike }[];
          stake: BigNumberish;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeBlocks(
      _blocksData: {
        storedBlock: {
          blockNumber: BigNumberish;
          numberOfLayer1Txs: BigNumberish;
          numberOfLayer2Txs: BigNumberish;
          priorityOperationsComplexity: BigNumberish;
          processableOnchainOperationsHash: BytesLike;
          priorityOperationsHash: BytesLike;
          timestamp: BigNumberish;
          stateRoot: BytesLike;
          zkPorterRoot: BytesLike;
          commitment: BytesLike;
        };
        processableOnchainOperations: BytesLike;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    movePriorityOpsFromBufferToMainQueue(
      _nOpsToMove: BigNumberish,
      _opTree: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proveBlocks(
      _committedBlocks: {
        blockNumber: BigNumberish;
        numberOfLayer1Txs: BigNumberish;
        numberOfLayer2Txs: BigNumberish;
        priorityOperationsComplexity: BigNumberish;
        processableOnchainOperationsHash: BytesLike;
        priorityOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateRoot: BytesLike;
        zkPorterRoot: BytesLike;
        commitment: BytesLike;
      }[],
      _proof: {
        recursiveInput: BigNumberish[];
        proof: BigNumberish[];
        commitments: BigNumberish[];
        vkIndexes: BigNumberish[];
        subproofsLimbs: [
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish,
          BigNumberish
        ];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revertBlocks(
      _blocksToRevert: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
