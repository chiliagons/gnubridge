/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPriorityModeInterface extends ethers.utils.Interface {
  functions: {
    "activatePriorityMode(uint32)": FunctionFragment;
    "placeBidForBlocksProcessingAuction(uint112,uint8)": FunctionFragment;
    "updatePriorityModeSubEpoch()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "activatePriorityMode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeBidForBlocksProcessingAuction",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriorityModeSubEpoch",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activatePriorityMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeBidForBlocksProcessingAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriorityModeSubEpoch",
    data: BytesLike
  ): Result;

  events: {
    "NewPriorityModeAuctionBid(uint8,address,uint96,uint256)": EventFragment;
    "NewPriorityModeSubEpoch(uint8,uint128)": EventFragment;
    "PriorityModeActivated()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewPriorityModeAuctionBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriorityModeSubEpoch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriorityModeActivated"): EventFragment;
}

export type NewPriorityModeAuctionBidEvent = TypedEvent<
  [number, string, BigNumber, BigNumber] & {
    opTree: number;
    sender: string;
    bidAmount: BigNumber;
    complexity: BigNumber;
  }
>;

export type NewPriorityModeSubEpochEvent = TypedEvent<
  [number, BigNumber] & { subEpoch: number; subEpochEndTimestamp: BigNumber }
>;

export type PriorityModeActivatedEvent = TypedEvent<[] & {}>;

export class IPriorityMode extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPriorityModeInterface;

  functions: {
    activatePriorityMode(
      _ethExpirationBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    placeBidForBlocksProcessingAuction(
      _complexityRoot: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePriorityModeSubEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activatePriorityMode(
    _ethExpirationBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  placeBidForBlocksProcessingAuction(
    _complexityRoot: BigNumberish,
    _opTree: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePriorityModeSubEpoch(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activatePriorityMode(
      _ethExpirationBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    placeBidForBlocksProcessingAuction(
      _complexityRoot: BigNumberish,
      _opTree: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePriorityModeSubEpoch(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "NewPriorityModeAuctionBid(uint8,address,uint96,uint256)"(
      opTree?: null,
      sender?: null,
      bidAmount?: null,
      complexity?: null
    ): TypedEventFilter<
      [number, string, BigNumber, BigNumber],
      {
        opTree: number;
        sender: string;
        bidAmount: BigNumber;
        complexity: BigNumber;
      }
    >;

    NewPriorityModeAuctionBid(
      opTree?: null,
      sender?: null,
      bidAmount?: null,
      complexity?: null
    ): TypedEventFilter<
      [number, string, BigNumber, BigNumber],
      {
        opTree: number;
        sender: string;
        bidAmount: BigNumber;
        complexity: BigNumber;
      }
    >;

    "NewPriorityModeSubEpoch(uint8,uint128)"(
      subEpoch?: null,
      subEpochEndTimestamp?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { subEpoch: number; subEpochEndTimestamp: BigNumber }
    >;

    NewPriorityModeSubEpoch(
      subEpoch?: null,
      subEpochEndTimestamp?: null
    ): TypedEventFilter<
      [number, BigNumber],
      { subEpoch: number; subEpochEndTimestamp: BigNumber }
    >;

    "PriorityModeActivated()"(): TypedEventFilter<[], {}>;

    PriorityModeActivated(): TypedEventFilter<[], {}>;
  };

  estimateGas: {
    activatePriorityMode(
      _ethExpirationBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    placeBidForBlocksProcessingAuction(
      _complexityRoot: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePriorityModeSubEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activatePriorityMode(
      _ethExpirationBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    placeBidForBlocksProcessingAuction(
      _complexityRoot: BigNumberish,
      _opTree: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePriorityModeSubEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
