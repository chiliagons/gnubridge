/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DiamondInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "DiamondCut(tuple[],address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
}

export type DiamondCutEvent = TypedEvent<
  [
    ([string, number, boolean, string[]] & {
      facet: string;
      action: number;
      isFreezable: boolean;
      selectors: string[];
    })[],
    string,
    string
  ] & {
    facetCuts: ([string, number, boolean, string[]] & {
      facet: string;
      action: number;
      isFreezable: boolean;
      selectors: string[];
    })[];
    initAddress: string;
    initCalldata: string;
  }
>;

export class Diamond extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DiamondInterface;

  functions: {};

  callStatic: {};

  filters: {
    "DiamondCut(tuple[],address,bytes)"(
      facetCuts?: null,
      initAddress?: null,
      initCalldata?: null
    ): TypedEventFilter<
      [
        ([string, number, boolean, string[]] & {
          facet: string;
          action: number;
          isFreezable: boolean;
          selectors: string[];
        })[],
        string,
        string
      ],
      {
        facetCuts: ([string, number, boolean, string[]] & {
          facet: string;
          action: number;
          isFreezable: boolean;
          selectors: string[];
        })[];
        initAddress: string;
        initCalldata: string;
      }
    >;

    DiamondCut(
      facetCuts?: null,
      initAddress?: null,
      initCalldata?: null
    ): TypedEventFilter<
      [
        ([string, number, boolean, string[]] & {
          facet: string;
          action: number;
          isFreezable: boolean;
          selectors: string[];
        })[],
        string,
        string
      ],
      {
        facetCuts: ([string, number, boolean, string[]] & {
          facet: string;
          action: number;
          isFreezable: boolean;
          selectors: string[];
        })[];
        initAddress: string;
        initCalldata: string;
      }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
